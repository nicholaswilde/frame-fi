---
version: '3'

includes:
  led:
    taskfile: ./.tasks/led.yml
  mqtt:
    taskfile: ./.tasks/mqtt.yml
  display:
    taskfile: ./.tasks/display.yml
  ftp:
    taskfile: ./.tasks/ftp.yml
  device:
    taskfile: ./.tasks/device.yml

dotenv: ["scripts/.env"]

vars:
  FTP_HOST: '{{.FTP_HOST | default "192.168.2.169"}}'
  FTP_USER: '{{.FTP_USER | default "ftpuser"}}'
  FTP_PASSWORD: '{{.FTP_PASSWORD | default "ftppass"}}'
  WEB_SERVER_USER: '{{.WEB_SERVER_USER | default "admin"}}'
  WEB_SERVER_PASSWORD: '{{.WEB_SERVER_PASSWORD | default "password"}}'
  IMAGE: nicholaswilde/mkdocs-material
  PORT: 8000

tasks:
  gpro:
    desc: Run Gemini with the gemini-2.5-pro model.
    cmds:
      - gemini -m gemini-2.5-pro
  gflash:
    desc: Run Gemini with the gemini-2.5-flash model.
    cmds:
      - gemini -m gemini-2.5-flash
  flash:
    desc: Flash the latest firmware to the device using the flash.sh script.
    cmds:
      - ./scripts/flash.sh
  export:
    desc: Export the list of available tasks to task-list.txt.
    cmds:
      - task -l > task-list.txt
  serve:
    desc: Serve the documentation locally using Docker.
    cmds:
      - >-
        docker run --rm -it -p {{ .PORT }}:{{ .PORT}} -v ${PWD}:/docs
        --platform linux/amd64 {{ .IMAGE }} serve
        --dev-addr 0.0.0.0:{{ .PORT }} -f ./mkdocs.yml
  sync:
    desc: Synchronize local files to the device via FTP using the sync.sh script.
    dir: scripts
    cmds:
      - bash sync.sh
  ping:
    desc: Ping the device to check network connectivity.
    cmds:
      - ping {{.FTP_HOST}}
  smsc:
    desc: Switch the device to USB Mass Storage (MSC) mode via API call.
    cmds:
      - curl -X POST http://{{.FTP_HOST}}/mode/msc
  smsc:
    desc: Switch the device to USB Mass Storage (MSC) mode via API call.
    cmds:
      - curl -X POST http://{{.FTP_HOST}}/mode/msc
  restart:
    desc: Restart the device via API call.
    cmds:
      - curl -X POST http://{{.FTP_HOST}}/restart
  get:
    desc: Get device status via API call (unauthenticated).
    cmds:
      - curl -X GET http://{{.FTP_HOST}}
  getp:
    desc: Get device status via API call and prettyify it (unauthenticated).
    preconditions:
      - sh: 'command -v jq'
        msg: 'jq is not installed. Please install it to run this task.'
    cmds:
      - curl -s -X GET http://{{.FTP_HOST}} | jq '.'
  geta:
    desc: Get device status via API call (authenticated).
    cmds:
      - curl -u {{.WEB_SERVER_USER}}:{{.WEB_SERVER_PASSWORD}} -X GET http://{{.FTP_HOST}}/
  getap:
      desc: Get device status via API call and prettify it (authenticated).
      preconditions:
        - sh: 'command -v jq'
          msg: 'jq is not installed. Please install it to run this task.'
      cmds:
        - curl -s -u {{.WEB_SERVER_USER}}:{{.WEB_SERVER_PASSWORD}} -X GET http://{{.FTP_HOST}}/ | jq '.'
  
  prune:
    desc: Prune unused PlatformIO files to save space.
    cmds:
      - pio system prune
  init:
    desc: Initialize the project by creating secret and environment files from templates.
    preconditions:
      - test -f include/secrets.h.tmpl
      - test -f scripts/.env.tmpl
    cmds:
      - cp include/secrets.h.tmpl include/secrets.h
      - cp scripts/.env.tmpl scripts/.env
  encrypt:
    desc: Encrypt secret and environment files using sops.
    preconditions:
      - test -f include/secrets.h
      - test -f scripts/.env
    cmds:
      - sops -e include/secrets.h > include/secrets.h.enc
      - sops -e --input-type dotenv --output-type dotenv scripts/.env > scripts/.env.enc
  decrypt:
    desc: Decrypt secret and environment files using sops.
    preconditions:
      - test -f include/secrets.h.enc
      - test -f scripts/.env.enc
    cmds:
      - sops -d include/secrets.h.enc > include/secrets.h
      - sops -d --input-type dotenv --output-type dotenv scripts/.env.enc > scripts/.env
  build:
    desc: Build the firmware using PlatformIO.
    cmds:
      - pio run
  clean:
    desc: Clean the build files.
    cmds:
      - pio run --target clean
  fullclean:
    desc: Perform a deep clean of all build and dependency files.
    cmds:
      - pio run --target fullclean
  upload:
    desc: Upload the compiled firmware to the device.
    cmds:
      - pio run --target upload
  uploadm:
    desc: Upload the firmware and immediately start monitoring the serial output.
    cmds:
      - pio run -t upload -t monitor
  monitor:
    desc: Monitor the device's serial output.
    cmds:
      - pio device monitor
  list-devices:
    desc: List all connected serial devices.
    cmds:
      - pio device list
  update-packages:
    desc: Update all project dependencies to their latest versions.
    cmds:
      - pio pkg update
  verbose-build:
    desc: Build the project with verbose output for debugging.
    cmds:
      - pio run --verbose
  reset:
    desc: Reset the dongle by flashing it with the default factory firmware.
    cmds:
      - task: flash
        dir: ./reference/firmware
  default:
    desc: List all available tasks.
    cmds:
      - task -l
    silent: true
