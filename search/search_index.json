{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FrameFi: Wireless Freedom for Digital Picture Frames","text":"<p>FrameFi transforms a LILYGO T-Dongle S3 into a versatile adapter for any digital picture frame. It enables you to remotely manage your photo library via FTP or access the SD card directly in USB Mass Storage mode.</p> <p>Development Version</p> <p>This project is currently in a <code>v0.X.X</code> development stage. Features and configurations are subject to change, and breaking changes may be introduced at any time.</p>","tags":["frame-fi"]},{"location":"#tldr","title":"TL;DR","text":"<ul> <li> <p>Computer: Plug in the LILYGO T-Dongle S3 to a computer USB port while holding the button to put it into boot mode.</p> </li> <li> <p>Flash: Execute the <code>flash.sh</code> script remotely from GitHub.</p> </li> </ul> <pre><code>bash -c \"$(curl -fsSL https://raw.githubusercontent.com/nicholaswilde/frame-fi/main/scripts/flash.sh)\" _ /dev/ttyUSB0\n</code></pre> <p>Security Risk</p> <p>Running a script directly from the internet with <code>bash -c \"$(curl...)\"</code> is a potential security risk. Always review the script's source code before executing it to ensure it is safe. You can view the script here.</p> <ul> <li> <p>Reboot the Device: Unplug the dongle from your computer and plug it back in to reboot it.</p> </li> <li> <p>Wi-Fi Credentials: Connect to <code>FrameFi-&lt;MAC&gt;</code> access point and enter FTP, MQTT (optional), and Wi-Fi credentials.</p> </li> </ul> <p>Tip</p> <p>If the captive portal does not open automatically, navigate to http://192.168.4.1 in your web browser to configure Wi-Fi.</p> <ul> <li> <p>Digital Picture Frame: Plug in dongle to digital picture frame.</p> </li> <li> <p>Check Status: Check the status of the device.</p> </li> </ul> UnauthenticatedAuthenticated <pre><code>curl -X GET http://&lt;DEVICE_IP&gt;/\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X GET http://&lt;DEVICE_IP&gt;/\n</code></pre> <ul> <li>Mode Switching: A button or API call switches between FTP and USB Mass Storage modes.</li> </ul> <p>FTP Mode</p> UnauthenticatedAuthenticated <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/mode/ftp\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST http://&lt;DEVICE_IP&gt;/mode/ftp\n</code></pre> <p>USB MSC Mode</p> UnauthenticatedAuthenticated <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/mode/msc\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST http://&lt;DEVICE_IP&gt;/mode/msc\n</code></pre> <ul> <li>FTP Access: Connect to the device with an FTP client using the IP on the display and credentials set in <code>WiFiManager</code> to upload files.</li> </ul> <p>Log into the device via FTP</p> <pre><code>ftp &lt;HOST&gt;\n</code></pre> <p>Upload pictures to the device</p> <pre><code>put my-picture.png\n</code></pre> <ul> <li>FTP Mode: Upload pictures to the dongle via FTP using <code>lftp</code> or <code>scripts/sync.sh</code>.</li> </ul> <pre><code>lftp -c \"\nset ftp:ssl-allow no;\nopen -u '&lt;FTP_USER&gt;','&lt;FTP_PASSWORD&gt;' '&lt;FTP_HOST&gt;';\nmirror -R --delete --verbose --only-missing --no-perms --parallel=1 '&lt;REMOTE_DIR&gt;' '&lt;LOCAL_DIR&gt;';\n\"\n</code></pre> <ul> <li>MQTT: Publish a message to the MQTT broker to turn the display on or off.</li> </ul> <pre><code>mosquitto_pub -h &lt;MQTT_BROKER_IP&gt; -t \"frame-fi/display/set\" -m \"ON\"\n</code></pre>","tags":["frame-fi"]},{"location":"#features","title":"Features","text":"<ul> <li> Dual-Mode Operation:<ul> <li>FTP Server Mode: Wirelessly manage files on the SD card over your Wi-Fi network.</li> </ul> <p>Warning</p> <p>FTP is an insecure protocol. Only use this feature on a trusted network.</p> <ul> <li>USB Mass Storage (MSC) Mode: Connect directly to a computer for high-speed file transfers, treating the device like a standard USB drive.</li> </ul> </li> <li> Connectivity &amp; Remote Management:<ul> <li>Dynamic Wi-Fi Setup: An initial captive portal (<code>WiFiManager</code>) allows for easy configuration of Wi-Fi, FTP, and MQTT credentials without hardcoding.</li> <li>REST API: A built-in web server provides endpoints to check device status, switch modes, control the display, and restart the device.</li> <li>MQTT Integration: Publish device status and control the display via MQTT, enabling seamless integration with Home Assistant or other automation platforms.</li> </ul> </li> <li> User Interface &amp; Experience:<ul> <li>Onboard LCD Display: A vibrant color display shows the current mode, network information (IP, MAC), and SD card usage with a visual bar graph. Styled with the Catppuccin color theme.</li> <li>Simple Physical Controls:<ul> <li>A single button press toggles between FTP and MSC modes.</li> <li>A long press (3 seconds) resets Wi-Fi and device configuration.</li> </ul> </li> <li>LED Status Indicator: An RGB LED provides at-a-glance feedback on the device's operational state (e.g., booting, connecting, FTP transfer).</li> </ul> </li> <li> Performance &amp; Storage:<ul> <li>High-Speed SD Card Access: Utilizes the 4-bit <code>SD_MMC</code> interface for significantly faster read/write performance compared to standard SPI.</li> <li>Persistent Configuration: Device settings are saved to the internal flash storage (<code>LittleFS</code>), surviving reboots and power cycles.</li> </ul> </li> <li> Developer Friendly:<ul> <li>OTA Firmware Updates: Flash new firmware remotely using a simple script.</li> <li>Serial Monitor Debugging: Provides detailed operational logs over USB serial.</li> </ul> </li> </ul>","tags":["frame-fi"]},{"location":"#to-do","title":"To Do","text":"<ul> <li> Use hard-coded Wi-Fi credentials in addition to the captive portal. (#9)</li> </ul>","tags":["frame-fi"]},{"location":"#license","title":"License","text":"<p>Apache License 2.0</p>","tags":["frame-fi"]},{"location":"#author","title":"Author","text":"<p>This project was started in 2025 by Nicholas Wilde.</p>","tags":["frame-fi"]},{"location":"#references","title":"References","text":"<ul> <li>https://docs.frame-fi.sh</li> <li>https://github.com/espressif/arduino-esp32</li> <li>https://github.com/Xinyuan-LilyGO/T-Dongle-S3</li> <li>https://github.com/i-am-shodan/USBArmyKnife</li> </ul>","tags":["frame-fi"]},{"location":"AGENTS/","title":"Markdown Documentation Guidelines for Gemini","text":"<p>Context: This directory contains all project documentation in Markdown format.</p> <p>Specific Instructions for Markdown Files: - Use clear and descriptive headings (H1 for main topic, H2 for sub-sections). - Employ bullet points and numbered lists for readability. - Use backticks (<code>`</code>) for inline code and triple backticks (<code>) for code blocks, specifying the language (e.g.,</code>bash<code>, ```python</code>). - Keep paragraphs concise. - Link to relevant files or sections using relative paths where appropriate. - Ensure a consistent tone and voice (e.g., formal, informal, instructional). - Favor simple Markdown over complex HTML embeds unless absolutely necessary. - All documentation is written in Markdown and generated using the MkDocs with the Material theme. - Adhere strictly to the MkDocs-Material syntax extensions for features like admonitions, content tabs, and icons. - Ensure all new pages are added to the <code>nav</code> section of the <code>mkdocs.yml</code> file to appear in the site navigation. - All internal links must be relative and point to other <code>.md</code> files within the <code>docs/</code> directory. - Do not use first-person nor third-person perspective in the document.</p>"},{"location":"AGENTS/#markdown-style-guide","title":"Markdown Style Guide:","text":"<ul> <li>Headings: Use ATX-style headings (<code>#</code>, <code>##</code>, <code>###</code>, etc.). The main page title is always H1 (<code>#</code>).</li> <li>All Headings should start with emoji using mkdocs-material compatible shortcode.</li> <li>Admonitions: Use admonitions to highlight important information.</li> <li><code>!!! note</code> for general information.</li> <li><code>!!! code</code> for computer code and commands.</li> <li><code>!!! abstract</code> for referencing files.</li> <li><code>??? abstract</code> for long files that need to be collapsed.</li> <li><code>!!! tip</code> for helpful advice.</li> <li><code>!!! warning</code> for critical warnings or potential issues.</li> <li><code>!!! danger</code> for severe risks.</li> <li>Code Blocks: Always specify the language for syntax highlighting (e.g., <code>```python</code>). For shell commands, use <code>shell</code> or <code>bash</code>. Use <code>ini</code> for <code>.env</code> files.</li> <li>Lists: Use hyphens (<code>-</code>) for unordered lists and numbers (<code>1.</code>) for ordered lists.</li> <li>Icons &amp; Emojis: Use Material Design icons and emojis where appropriate to improve visual communication, e.g., <code>:material-check-circle:</code> for success.</li> <li>Icons &amp; Emojis: Use the short codes for emoji instead of the emoji itself.</li> <li>Use 2 spaces for indentation.</li> <li>List items that are links should be inclosed with &lt; and &gt;.</li> <li>Formatting shall be compatible with markdownlint.</li> <li>All hyperlinks should reference a number and the numbers should be at the bottom of the document (e.g. <code>[tool name][1] and</code>1: ` )"},{"location":"AGENTS/#sections","title":"Sections:","text":"<ul> <li>All sections should have emoji in front of the section name.</li> <li>References: Always end a page with a References section.</li> <li>References section starts with the  emoji.</li> <li>References section has a list of relevant links.</li> <li>Config: Create a config section</li> <li>Installation: Create an installation section.</li> <li>This section should show instructions for both amd64 and arm64 architectures.</li> <li>Usage: Create a usage section</li> </ul>"},{"location":"AGENTS/#docsapps","title":"docs/apps/","text":"<ul> <li>This directory contains apps that are installed in my homelab.</li> <li>Instructions should be given for installing the app.</li> </ul>"},{"location":"AGENTS/#docstools","title":"docs/tools/","text":"<ul> <li>This directory contains tools that are used in my homelab.</li> </ul>"},{"location":"AGENTS/#regarding-dependencies","title":"Regarding Dependencies:","text":"<ul> <li>The primary dependency is mkdocs-material.</li> <li>The project also uses the pymdown-extensions for advanced formatting.</li> <li>Mermaid is an acceptable plugin.</li> <li>Do not introduce new MkDocs plugins without prior discussion and approval.</li> </ul>"},{"location":"AGENTS/#example-script-structure","title":"Example Script Structure:","text":"<p>tags:   - relevant-tags</p>"},{"location":"AGENTS/#emoji-name-of-application-or-tool","title":":emoji: Name of application or tool","text":"<p>Description of application or tool. The name of the tool should be a hyperlink to the original source.</p>"},{"location":"AGENTS/#installation","title":"Installation","text":"<p>Instructions on how to install the application or tool.</p> amd64arm64 <pre><code>code to install the application or tool\n</code></pre> <pre><code>code to install the application or tool\n</code></pre>"},{"location":"AGENTS/#config","title":"Config","text":"<p>Instructions on how to configure the application or tool.</p> <p>homelab/path/config/file</p> <pre><code>example of yaml config file\n</code></pre>"},{"location":"AGENTS/#usage","title":"Usage","text":"<p>Instructions on how to use the application or tool.</p>"},{"location":"AGENTS/#upgrade","title":"Upgrade","text":"<p>Code to upgrade the application or tool.</p> TaskManual <pre><code>task update\n</code></pre> <pre><code>command to update application or tool\n</code></pre>"},{"location":"AGENTS/#references","title":"References","text":"<ul> <li> <li>"},{"location":"api/","title":"Web API","text":"<p>The device hosts a simple web server that allows you to check status and switch modes.</p> <p>Insecure Protocol</p> <p>HTTP is an inherently insecure protocol that transmits data, including credentials, in plain text. Only use this feature on a trusted, private network.</p>","tags":["usage","api"]},{"location":"api/#web-server-credentials","title":"Web Server Credentials","text":"<p>The web server can be protected by basic authentication. You can set the username and password in the WiFiManager setup page.</p> <ul> <li>Connect with <code>curl</code>:<ul> <li>Use the <code>-u</code> or <code>--user</code> flag to provide credentials.</li> <li>If you omit the password, <code>curl</code> will prompt for it securely.</li> </ul> </li> </ul> <p>Tip</p> <p>To make the web server unauthenticated, make the <code>user</code> and <code>password</code> blank in the WiFiManager setup page.</p>","tags":["usage","api"]},{"location":"api/#error-handling","title":"Error Handling","text":"<p>This API uses standard HTTP status codes to indicate the success or failure of a request. Common status codes include:</p> <ul> <li>200 OK: The request was successful.</li> <li>400 Bad Request: The request was malformed or invalid (e.g., incorrect parameters, invalid data format).</li> <li>401 Unauthorized: Authentication failed. Ensure you are providing valid credentials.</li> <li>403 Forbidden: You are authenticated but do not have permission to perform the requested action.</li> <li>404 Not Found: The requested resource or endpoint does not exist.</li> <li>500 Internal Server Error: An unexpected error occurred on the server.</li> </ul> <p>Specific endpoints may return additional details in the JSON response body to further clarify the error.</p>","tags":["usage","api"]},{"location":"api/#web-server-commands","title":"Web Server Commands","text":"<p>Tip</p> <p>Run the <code>test-api.sh</code> script to automate API tests to verify the device's web API functionality.</p> <p><code>GET /</code>: Returns the current mode, display status, and SD card information.</p> UnauthenticatedAuthenticated <pre><code>curl -X GET http://&lt;DEVICE_IP&gt;/\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X GET http://&lt;DEVICE_IP&gt;/\n</code></pre> <p>Example Response</p> <pre><code>{\n  \"mode\": \"USB MSC\",\n  \"display\": {\n    \"status\": \"on\",\n    \"orientation\": 1\n  },\n  \"sd_card\": {\n    \"total_size\": 9876543210,\n    \"used_size\": 1234567890,\n    \"free_size\": 8641975320,\n    \"file_count\": 42\n  },\n  \"mqtt\": {\n    \"enabled\": true,\n    \"state\": 0,\n    \"connected\": true\n  },\n  \"led\": {\n    \"color\": \"green\",\n    \"state\": \"on\",\n    \"brightness\": 13\n  }\n}\n</code></pre> <p>MQTT Icon</p> <p>On the device's display, a small circle icon indicates the MQTT connection status:</p> <ul> <li> Green: The MQTT client is connected to the broker.</li> <li> Red: The MQTT client is disconnected from the broker.</li> <li>Missing: The MQTT client is disabled.</li> </ul> MQTT State State Description State Description <code>-4</code> MQTT_CONNECTION_TIMEOUT <code>1</code> MQTT_CONNECT_BAD_PROTOCOL <code>-3</code> MQTT_CONNECTION_LOST <code>2</code> MQTT_CONNECT_BAD_CLIENT_ID <code>-2</code> MQTT_CONNECT_FAILED <code>3</code> MQTT_CONNECT_UNAVAILABLE <code>-1</code> MQTT_DISCONNECTED <code>4</code> MQTT_CONNECT_BAD_CREDENTIALS <code>0</code> MQTT_CONNECTED <code>5</code> MQTT_CONNECT_UNAUTHORIZED <p><code>GET /mode/msc</code>: Returns the current mode (USB Mass Storage or FTP).</p> UnauthenticatedAuthenticated <pre><code>curl -X GET http://&lt;DEVICE_IP&gt;/mode/msc\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X GET http://&lt;DEVICE_IP&gt;/mode/msc\n</code></pre> <p>Example Response</p> <pre><code>{\"status\":\"success\",\"mode\":\"USB MSC\"}\n</code></pre> <p><code>POST /mode/msc</code>: Switches the device to USB Mass Storage (MSC) mode.</p> UnauthenticatedAuthenticated <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/mode/msc\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST http://&lt;DEVICE_IP&gt;/mode/msc\n</code></pre> <p>Example Responses</p> Success (200 OK)No Change (200 OK)Error (500 Internal Server Error) <pre><code>{\"status\":\"success\",\"message\":\"Switched to MSC mode.\"}\n</code></pre> <pre><code>{\"status\":\"no_change\",\"message\":\"Already in MSC mode.\"}\n</code></pre> <pre><code>{\"status\":\"error\",\"message\":\"Failed to switch to MSC mode.\"}\n</code></pre> <p><code>GET /mode/ftp</code>: Returns the current mode (USB Mass Storage or FTP).</p> UnauthenticatedAuthenticated <pre><code>curl -X GET http://&lt;DEVICE_IP&gt;/mode/ftp\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X GET http://&lt;DEVICE_IP&gt;/mode/ftp\n</code></pre> <p>Example Response</p> <pre><code>{\"status\":\"success\",\"mode\":\"Application (FTP Server)\"}\n</code></pre> <p><code>POST /mode/ftp</code>: Switches the device to FTP mode.</p> UnauthenticatedAuthenticated <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/mode/ftp\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST http://&lt;DEVICE_IP&gt;/mode/ftp\n</code></pre> <p>Example Responses</p> Success (200 OK)No Change (200 OK)Error (500 Internal Server Error) <pre><code>{\"status\":\"success\",\"message\":\"Switched to Application (FTP) mode.\"}\n</code></pre> <pre><code>{\"status\":\"no_change\",\"message\":\"Already in Application (FTP) mode.\"}\n</code></pre> <pre><code>{\"status\":\"error\",\"message\":\"Failed to re-initialize SD card.\"}\n</code></pre> <p><code>POST /device/restart</code>: Restarts the device.</p> UnauthenticatedAuthenticated <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/device/restart\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST http://&lt;DEVICE_IP&gt;/device/restart\n</code></pre> <p>Example Response:</p> Success (200 OK) <pre><code>{\"status\":\"success\",\"message\":\"Restarting device...\"}\n</code></pre> <p><code>GET /display/status</code>: Returns the current display status.</p> UnauthenticatedAuthenticated <pre><code>curl -X GET http://&lt;DEVICE_IP&gt;/display/status\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X GET http://&lt;DEVICE_IP&gt;/display/status\n</code></pre> <p>Example Response</p> <pre><code>{\"status\":\"success\",\"display_status\":\"on\"}\n</code></pre> <p><code>POST /display/toggle</code>: Toggles the display on and off.</p> UnauthenticatedAuthenticated <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/display/toggle\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST http://&lt;DEVICE_IP&gt;/display/toggle\n</code></pre> <p>Example Responses</p> Success (200 OK)Success (200 OK) <pre><code>{\"status\":\"success\",\"message\":\"Display toggled on.\"}\n</code></pre> <pre><code>{\"status\":\"success\",\"message\":\"Display toggled off.\"}\n</code></pre> <p><code>POST /display/on</code>: Turns the display on.</p> UnauthenticatedAuthenticated <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/display/on\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST http://&lt;DEVICE_IP&gt;/display/on\n</code></pre> <p>Example Response</p> Success (200 OK) <pre><code>{\"status\":\"success\",\"message\":\"Display turned on.\"}\n</code></pre> <p><code>POST /display/off</code>: Turns the display off.</p> UnauthenticatedAuthenticated <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/display/off\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST http://&lt;DEVICE_IP&gt;/display/off\n</code></pre> <p>Example Response</p> Success (200 OK) <pre><code>{\"status\":\"success\",\"message\":\"Display turned off.\"}\n</code></pre> <p><code>POST /wifi/reset</code>: Resets the Wi-Fi settings and restarts the device.</p> UnauthenticatedAuthenticated <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/wifi/reset\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST http://&lt;DEVICE_IP&gt;/wifi/reset\n</code></pre> <p>Example Response</p> Success (200 OK) <pre><code>{\"status\":\"success\",\"message\":\"Resetting Wi-Fi and restarting...\"}\n</code></pre> <p>Device Unreachable After Reset</p> <p>After resetting the Wi-Fi settings, the device will restart and will no longer be connected to your Wi-Fi network. It will become unreachable at its previous IP address. You must reconnect to its Access Point (AP) to configure the new Wi-Fi credentials. See the Modes of Operation section for details on connecting to the AP.</p> <p><code>GET /mqtt/status</code>: Returns the current MQTT client status.</p> UnauthenticatedAuthenticated <pre><code>curl -X GET http://&lt;DEVICE_IP&gt;/mqtt/status\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X GET http://&lt;DEVICE_IP&gt;/mqtt/status\n</code></pre> <p>Example Response</p> <pre><code>{\n  \"status\": \"success\",\n  \"mqtt_enabled\": true,\n  \"mqtt_connected\": true,\n  \"mqtt_state\": 0\n}\n</code></pre> <p><code>POST /mqtt/enable</code>: Enables the MQTT client.</p> UnauthenticatedAuthenticated <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/mqtt/enable\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST http://&lt;DEVICE_IP&gt;/mqtt/enable\n</code></pre> <p>Example Response</p> Success (200 OK) <pre><code>{\"status\":\"success\",\"message\":\"MQTT enabled.\"}\n</code></pre> <p><code>POST /mqtt/disable</code>: Disables the MQTT client.</p> UnauthenticatedAuthenticated <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/mqtt/disable\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST http://&lt;DEVICE_IP&gt;/mqtt/disable\n</code></pre> <p>Example Response</p> Success (200 OK) <pre><code>{\"status\":\"success\",\"message\":\"MQTT disabled.\"}\n</code></pre> <p><code>POST /mqtt/toggle</code>: Toggles the MQTT client on and off.</p> UnauthenticatedAuthenticated <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/mqtt/toggle\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST http://&lt;DEVICE_IP&gt;/mqtt/toggle\n</code></pre> <p>Example Responses</p> Success (200 OK)Success (200 OK) <pre><code>{\"status\":\"success\",\"message\":\"MQTT enabled.\"}\n</code></pre> <pre><code>{\"status\":\"success\",\"message\":\"MQTT disabled.\"}\n</code></pre> <p><code>GET /led/status</code>: Returns the current LED color and state.</p> UnauthenticatedAuthenticated <pre><code>curl -X GET http://&lt;DEVICE_IP&gt;/led/status\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X GET http://&lt;DEVICE_IP&gt;/led/status\n</code></pre> <p>Example Response</p> <pre><code>{\n  \"status\": \"success\",\n  \"color\": \"green\",\n  \"state\": \"on\",\n  \"brightness\": 13\n}\n</code></pre> <p><code>POST /led/on</code>: Turns the LED on.</p> UnauthenticatedAuthenticated <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/led/on\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST http://&lt;DEVICE_IP&gt;/led/on\n</code></pre> <p>Example Response</p> <pre><code>{\"status\":\"success\",\"message\":\"LED turned on.\"}\n</code></pre> <p><code>POST /led/off</code>: Turns the LED off.</p> UnauthenticatedAuthenticated <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/led/off\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST http://&lt;DEVICE_IP&gt;/led/off\n</code></pre> <p>Example Response</p> Success (200 OK) <pre><code>{\"status\":\"success\",\"message\":\"LED turned off.\"}\n</code></pre> <p><code>POST /led/toggle</code>: Toggles the LED on and off.</p> UnauthenticatedAuthenticated <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/led/toggle\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST http://&lt;DEVICE_IP&gt;/led/toggle\n</code></pre> <p>Example Responses</p> Success (200 OK)Success (200 OK) <pre><code>{\"status\":\"success\",\"message\":\"LED toggled on.\"}\n</code></pre> <pre><code>{\"status\":\"success\",\"message\":\"LED toggled off.\"}\n</code></pre> <p><code>GET /led/brightness</code>: Returns the current LED brightness.</p> UnauthenticatedAuthenticated <pre><code>curl -X GET http://&lt;DEVICE_IP&gt;/led/brightness\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X GET http://&lt;DEVICE_IP&gt;/led/brightness\n</code></pre> <p>Example Response</p> <pre><code>{\"status\":\"success\",\"brightness\":128}\n</code></pre> <p><code>POST /led/brightness</code>: Sets the LED brightness. The body of the request should be a plain text integer between 0 and 255.</p> UnauthenticatedAuthenticated <pre><code>curl -X POST -H 'Content-Type: text/plain' -d '128' http://&lt;DEVICE_IP&gt;/led/brightness\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST -H 'Content-Type: text/plain' -d '128' http://&lt;DEVICE_IP&gt;/led/brightness\n</code></pre> <p>Example Responses</p> Success (200 OK)Error (400 Bad Request) <pre><code>{\"status\":\"success\",\"message\":\"LED brightness set to 128.\"}\n</code></pre> <pre><code>{\"status\":\"error\",\"message\":\"Invalid brightness value. Body must be a plain text integer between 0 and 255.\"}\n</code></pre> <p><code>POST /upload</code>: Uploads a file to the device's SD card using <code>multipart/form-data</code>.</p> <p>Cannot Upload in MSC Mode</p> <p>File uploads are only supported when the device is in FTP Server Mode. Attempts to upload in USB Mass Storage (MSC) mode will result in an error.</p> UnauthenticatedAuthenticated <pre><code>curl -X POST -F \"file=@/path/to/your/image.jpg;filename=image.jpg\" http://&lt;DEVICE_IP&gt;/upload\n</code></pre> <pre><code>curl -u &lt;USERNAME&gt;:&lt;PASSWORD&gt; -X POST -F \"file=@/path/to/your/image.jpg;filename=image.jpg\" http://&lt;DEVICE_IP&gt;/upload\n</code></pre> <p>Example Responses</p> Success (200 OK)Error (400 Bad Request)Error (500 Internal Server Error) <pre><code>{\"status\":\"success\",\"message\":\"File uploaded successfully.\"}\n</code></pre> <pre><code>{\"status\":\"error\",\"message\":\"Cannot upload in MSC mode.\"}\n</code></pre> <pre><code>{\"status\":\"error\",\"message\":\"Failed to open file for writing.\"}\n</code></pre>","tags":["usage","api"]},{"location":"api/#references","title":"References","text":"","tags":["usage","api"]},{"location":"building/","title":"Building","text":"<p>This project uses a <code>Taskfile.yml</code> for common development tasks. After installing Task, you can run the following commands.</p> <p>Build the project:</p> TaskPlatformIO <pre><code>task build\n</code></pre> <pre><code>pio run\n</code></pre> <p>Upload the firmware:</p> TaskPlatformIO <pre><code>task upload\n</code></pre> <pre><code>pio run --target upload\n</code></pre> <p>Rebooting the Device</p> <p>After uploading the firmware, you may need to unplug the dongle and plug it back in to reboot it and apply the changes.</p> <p>Monitor the serial output:</p> TaskPlatformIO <pre><code>task monitor\n</code></pre> <pre><code>pio device monitor\n</code></pre> <p>Clean build files:</p> TaskPlatformIO <pre><code>task clean\n</code></pre> <pre><code>pio run --target clean\n</code></pre> <p>List all available tasks:</p> Task <pre><code>task -l\n</code></pre>","tags":["usage","building"]},{"location":"building/#testing-the-api","title":"Testing the API","text":"<p>The <code>test-api.sh</code> script automates testing the device's web API functionality by performing various requests and verifying the responses.</p>","tags":["usage","building"]},{"location":"building/#dependencies","title":"Dependencies","text":"<p>You must have the following dependencies installed on your system:</p> <ul> <li><code>curl</code>: For interacting with web services.</li> <li><code>jq</code>: A lightweight and flexible command-line JSON processor.</li> </ul> Debian/UbuntumacOS (Homebrew) <pre><code>sudo apt install curl jq\n</code></pre> <pre><code>brew install curl jq\n</code></pre>","tags":["usage","building"]},{"location":"building/#configuration","title":"Configuration","text":"<p>The script requires an <code>.env</code> file with the device's IP address.</p> <ol> <li> <p>Copy the template <code>.env</code> File:</p> <pre><code>cp scripts/.env.tmpl scripts/.env\n</code></pre> </li> <li> <p>Edit <code>scripts/.env</code>: Update the <code>FTP_HOST</code> variable with your device's IP address.</p> </li> </ol> <p>scripts/.env</p> <pre><code>FTP_HOST=\"192.168.2.169\"\nFTP_USER=\"user\"\nFTP_PASSWORD=\"password\"\nWEB_SERVER_USER=\"\"\nWEB_SERVER_PASSWORD=\"\"\nLOCAL_DIR=\"data\"\nREMOTE_DIR=\"/\"\n</code></pre>","tags":["usage","building"]},{"location":"building/#script-usage","title":"Script Usage","text":"<ol> <li>Ensure the device is online and accessible at the configured IP address.</li> <li>Run the script from the scripts directory:</li> </ol> TaskBash <pre><code>task test-api\n</code></pre> <pre><code>cd scripts\n./test-api.sh\n</code></pre> test-api.sh <pre><code>#!/usr/bin/env bash\n################################################################################\n#\n# test-api.sh\n# ----------------\n# Tests the FrameFi device API by performing a GET request and verifying the JSON response.\n#\n# @author Nicholas Wilde, 0xb299a622\n# @date 16 Aug 2025\n# @version 0.1.0\n#\n################################################################################\n\n# Options\nset -e\nset -o pipefail\n\n# These are constants\nRED=$(tput setaf 1)\nGREEN=$(tput setaf 2)\nYELLOW=$(tput setaf 3)\nBLUE=$(tput setaf 4)\nRESET=$(tput sgr0)\nreadonly RED GREEN YELLOW BLUE RESET\n\nDELAY_SECONDS=1\nreadonly DELAY_SECONDS\n\n# Log function for standardized output\nfunction log() {\n  local TYPE=\"$1\"\n  local MESSAGE=\"$2\"\n  local COLOR=\"\"\n  local EMOJI=\"\"\n\n  case \"$TYPE\" in\n    \"INFO\") COLOR=\"${BLUE}\"; EMOJI=\"\";;\n    \"WARN\") COLOR=\"${YELLOW}\"; EMOJI=\"\u26a0\ufe0f \";;\n    \"ERRO\") COLOR=\"${RED}\"; EMOJI=\"\u274c \";;\n    \"SUCCESS\") COLOR=\"${BLUE}\"; EMOJI=\"\u2705 \"; TYPE=\"INFO\";;\n    *) COLOR=\"${RESET}\";;\n  esac\n\n  echo \"${COLOR}${TYPE}${RESET}[$(date +'%Y-%m-%d %H:%M:%S')] ${EMOJI}${MESSAGE}\"\n}\n\n# Check for dependencies\nfunction check_dependencies() {\n  log \"INFO\" \"Checking dependencies...\"\n  if ! command -v curl &amp;&gt; /dev/null; then\n    log \"ERRO\" \"curl could not be found. Please install it.\"\n    exit 1\n  fi\n  if ! command -v jq &amp;&gt; /dev/null; then\n    log \"ERRO\" \"jq could not be found. Please install it.\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Dependencies checked.\"\n}\n\nfunction load_vars() {\n  local ENV_FILE=\"$(dirname \"$0\")/.env\"\n\n  if [ ! -f \"${ENV_FILE}\" ]; then\n    log \"ERRO\" \"Environment file not found: ${ENV_FILE}\"\n    log \"ERRO\" \"Please create it from .env.tmpl and ensure FTP_HOST is set.\"\n    exit 1\n  fi\n\n  source \"${ENV_FILE}\"\n\n  if [ -z \"${FTP_HOST}\" ]; then\n    log \"ERRO\" \"FTP_HOST not set in ${ENV_FILE}\"\n    exit 1\n  fi\n}\n\n# Check if the device is online\nfunction check_device_status() {\n  log \"INFO\" \"Checking if device at ${FTP_HOST} is online...\"\n  if ! curl -s -o /dev/null --fail --connect-timeout 5 \"http://${FTP_HOST}/\"; then\n    log \"ERRO\" \"Device at ${FTP_HOST} is not responding.\"\n    log \"ERRO\" \"Please ensure the device is connected to the network and the IP address is correct.\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Device is online.\"\n}\n\n# Check initial device mode\nfunction check_initial_mode() {\n  log \"INFO\" \"Verifying initial device mode is USB MSC...\"\n  local RESPONSE\n  RESPONSE=$(curl -s \"http://${FTP_HOST}/\")\n  local CURRENT_MODE\n  CURRENT_MODE=$(echo \"${RESPONSE}\" | jq -r '.mode')\n\n  if [ \"${CURRENT_MODE}\" != \"USB MSC\" ]; then\n    log \"ERRO\" \"Device is not in USB MSC mode. Current mode: ${CURRENT_MODE}\"\n    log \"ERRO\" \"Please set the device to USB MSC mode before running tests.\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Device is in USB MSC mode.\"\n}\n\n# Function to perform an API request and validate the JSON response\nfunction request_and_verify() {\n  local METHOD=\"$1\"\n  local ENDPOINT=\"$2\"\n  local PAYLOAD=\"$3\"\n  local EXPECTED_FIELDS=\"$4\"\n  local API_URL=\"http://${FTP_HOST}${ENDPOINT}\"\n\n  log \"INFO\" \"Testing ${METHOD} ${API_URL}\"\n\n  local RESPONSE\n  if [ \"${METHOD}\" == \"POST\" ]; then\n    if [ -n \"${PAYLOAD}\" ]; then\n      RESPONSE=$(curl -s -X POST -H \"Content-Type: application/json\" -d \"${PAYLOAD}\" \"${API_URL}\")\n    else\n      RESPONSE=$(curl -s -X POST \"${API_URL}\")\n    fi\n  else # GET\n    RESPONSE=$(curl -s \"${API_URL}\")\n  fi\n\n  if ! echo \"${RESPONSE}\" | jq -e . &gt; /dev/null; then\n    log \"ERRO\" \"Response from ${ENDPOINT} is not valid JSON.\"\n    log \"ERRO\" \"Response: ${RESPONSE}\"\n    exit 1\n  fi\n\n  if [ \"${METHOD}\" == \"POST\" ]; then\n    local STATUS\n    STATUS=$(echo \"${RESPONSE}\" | jq -r '.status')\n    if [ \"${STATUS}\" != \"success\" ]; then\n      log \"ERRO\" \"${METHOD} ${ENDPOINT} failed. Status: ${STATUS}, Message: $(echo \"${RESPONSE}\" | jq -r '.message')\"\n      exit 1\n    fi\n    log \"INFO\" \"${METHOD} ${ENDPOINT} successful. Message: $(echo \"${RESPONSE}\" | jq -r '.message')\"\n  elif [ \"${METHOD}\" == \"GET\" ]; then\n    for field in ${EXPECTED_FIELDS}; do\n      local VALUE\n      VALUE=$(echo \"${RESPONSE}\" | jq -r \"${field}\")\n      if [ \"${VALUE}\" == \"null\" ]; then\n        log \"ERRO\" \"JSON response from ${ENDPOINT} missing '${field}' field or it's null.\"\n        exit 1\n      fi\n      log \"INFO\" \"${ENDPOINT} - ${field}: ${VALUE}\"\n    done\n    log \"SUCCESS\" \"${ENDPOINT} test completed successfully.\"\n  fi\n}\n\nfunction verify_display_toggle() {\n  log \"INFO\" \"Verifying display APIs...\"\n\n  # Test display off\n  log \"INFO\" \"Testing display off...\"\n  request_and_verify \"POST\" \"/display/off\" \"\" \"\"\n  sleep ${DELAY_SECONDS}\n  local STATUS\n  STATUS=$(curl -s \"http://${FTP_HOST}/display/status\" | jq -r '.display_status' | tr '[:lower:]' '[:upper:]')\n  if [ \"${STATUS}\" != \"OFF\" ]; then\n    log \"ERRO\" \"Display failed to turn off. Current status: ${STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Display is OFF.\"\n\n  # Test display off again (already off)\n  log \"INFO\" \"Testing display off again (already off)...\"\n  local RESPONSE\n  RESPONSE=$(curl -s -X POST \"http://${FTP_HOST}/display/off\")\n  local STATUS=$(echo \"${RESPONSE}\" | jq -r '.status')\n  local MESSAGE=$(echo \"${RESPONSE}\" | jq -r '.message')\n  if [ \"${STATUS}\" != \"success\" ] || [ \"${MESSAGE}\" != \"Display turned off.\" ]; then\n    log \"ERRO\" \"Display off again failed. Status: ${STATUS}, Message: ${MESSAGE}\"\n    exit 1\n  fi\n  sleep ${DELAY_SECONDS}\n  STATUS=$(curl -s \"http://${FTP_HOST}/display/status\" | jq -r '.display_status' | tr '[:lower:]' '[:upper:]')\n  if [ \"${STATUS}\" != \"OFF\" ]; then\n    log \"ERRO\" \"Display state changed unexpectedly after turning off again. Current status: ${STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Display is still OFF and message is correct.\"\n\n  # Test display on\n  log \"INFO\" \"Testing display on...\"\n  request_and_verify \"POST\" \"/display/on\" \"\" \"\"\n  sleep ${DELAY_SECONDS}\n  STATUS=$(curl -s \"http://${FTP_HOST}/display/status\" | jq -r '.display_status' | tr '[:lower:]' '[:upper:]')\n  if [ \"${STATUS}\" != \"ON\" ]; then\n    log \"ERRO\" \"Display failed to turn on. Current status: ${STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Display is ON.\"\n\n  # Test display on again (already on)\n  log \"INFO\" \"Testing display on again (already on)...\"\n  local RESPONSE\n  RESPONSE=$(curl -s -X POST \"http://${FTP_HOST}/display/on\")\n  local STATUS=$(echo \"${RESPONSE}\" | jq -r '.status')\n  local MESSAGE=$(echo \"${RESPONSE}\" | jq -r '.message')\n  if [ \"${STATUS}\" != \"success\" ] || [ \"${MESSAGE}\" != \"Display turned on.\" ]; then\n    log \"ERRO\" \"Display on again failed. Status: ${STATUS}, Message: ${MESSAGE}\"\n    exit 1\n  fi\n  sleep ${DELAY_SECONDS}\n  STATUS=$(curl -s \"http://${FTP_HOST}/display/status\" | jq -r '.display_status' | tr '[:lower:]' '[:upper:]')\n  if [ \"${STATUS}\" != \"ON\" ]; then\n    log \"ERRO\" \"Display state changed unexpectedly after turning on again. Current status: ${STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Display is still ON and message is correct.\"\n\n  # Test display toggle\n  log \"INFO\" \"Verifying display toggle...\"\n  local INITIAL_STATUS\n  INITIAL_STATUS=$(curl -s \"http://${FTP_HOST}/display/status\" | jq -r '.display_status')\n  log \"INFO\" \"Initial display status: ${INITIAL_STATUS}\"\n\n  request_and_verify \"POST\" \"/display/toggle\" \"\" \"\"\n  sleep ${DELAY_SECONDS}\n\n  local NEW_STATUS\n  NEW_STATUS=$(curl -s \"http://${FTP_HOST}/display/status\" | jq -r '.display_status')\n  log \"INFO\" \"New display status: ${NEW_STATUS}\"\n\n  if [ \"${INITIAL_STATUS}\" == \"${NEW_STATUS}\" ]; then\n    log \"ERRO\" \"Display status did not change after toggle.\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Display toggle verified successfully.\"\n\n  # Toggle display back on\n  log \"INFO\" \"Toggling display back on...\"\n  request_and_verify \"POST\" \"/display/toggle\" \"\" \"\"\n  sleep ${DELAY_SECONDS}\n\n  NEW_STATUS=$(curl -s \"http://${FTP_HOST}/display/status\" | jq -r '.display_status' | tr '[:lower:]' '[:upper:]')\n  if [ \"${NEW_STATUS}\" != \"ON\" ]; then\n    log \"ERRO\" \"Display failed to turn back on. Current status: ${NEW_STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Display is ON again.\"\n}\n\nfunction verify_led_toggle() {\n  log \"INFO\" \"Verifying LED APIs...\"\n\n  # Test LED off\n  log \"INFO\" \"Testing LED off...\"\n  request_and_verify \"POST\" \"/led/off\" \"\" \"\"\n  sleep ${DELAY_SECONDS}\n  local STATUS\n  STATUS=$(curl -s \"http://${FTP_HOST}/led/status\" | jq -r '.state' | tr '[:lower:]' '[:upper:]')\n  if [ \"${STATUS}\" != \"OFF\" ]; then\n    log \"ERRO\" \"LED failed to turn off. Current state: ${STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"LED is OFF.\"\n\n  # Test LED off again (already off)\n  log \"INFO\" \"Testing LED off again (already off)...\"\n  local RESPONSE\n  RESPONSE=$(curl -s -X POST \"http://${FTP_HOST}/led/off\")\n  local STATUS=$(echo \"${RESPONSE}\" | jq -r '.status')\n  local MESSAGE=$(echo \"${RESPONSE}\" | jq -r '.message')\n  if [ \"${STATUS}\" != \"success\" ] || [ \"${MESSAGE}\" != \"LED turned off.\" ]; then\n    log \"ERRO\" \"LED off again failed. Status: ${STATUS}, Message: ${MESSAGE}\"\n    exit 1\n  fi\n  sleep ${DELAY_SECONDS}\n  STATUS=$(curl -s \"http://${FTP_HOST}/led/status\" | jq -r '.state' | tr '[:lower:]' '[:upper:]')\n  if [ \"${STATUS}\" != \"OFF\" ]; then\n    log \"ERRO\" \"LED state changed unexpectedly after turning off again. Current state: ${STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"LED is still OFF and message is correct.\"\n\n  # Test LED on\n  log \"INFO\" \"Testing LED on...\"\n  request_and_verify \"POST\" \"/led/on\" \"\" \"\"\n  sleep ${DELAY_SECONDS}\n  STATUS=$(curl -s \"http://${FTP_HOST}/led/status\" | jq -r '.state' | tr '[:lower:]' '[:upper:]')\n  if [ \"${STATUS}\" != \"ON\" ]; then\n    log \"ERRO\" \"LED failed to turn on. Current state: ${STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"LED is ON.\"\n\n  # Test LED on again (already on)\n  log \"INFO\" \"Testing LED on again (already on)...\"\n  local RESPONSE\n  RESPONSE=$(curl -s -X POST \"http://${FTP_HOST}/led/on\")\n  local STATUS=$(echo \"${RESPONSE}\" | jq -r '.status')\n  local MESSAGE=$(echo \"${RESPONSE}\" | jq -r '.message')\n  if [ \"${STATUS}\" != \"success\" ] || [ \"${MESSAGE}\" != \"LED turned on.\" ]; then\n    log \"ERRO\" \"LED on again failed. Status: ${STATUS}, Message: ${MESSAGE}\"\n    exit 1\n  fi\n  sleep ${DELAY_SECONDS}\n  STATUS=$(curl -s \"http://${FTP_HOST}/led/status\" | jq -r '.state' | tr '[:lower:]' '[:upper:]')\n  if [ \"${STATUS}\" != \"ON\" ]; then\n    log \"ERRO\" \"LED state changed unexpectedly after turning on again. Current state: ${STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"LED is still ON and message is correct.\"\n\n  # Test LED toggle\n  log \"INFO\" \"Verifying LED toggle...\"\n  local INITIAL_STATUS\n  INITIAL_STATUS=$(curl -s \"http://${FTP_HOST}/led/status\" | jq -r '.state')\n  log \"INFO\" \"Initial LED state: ${INITIAL_STATUS}\"\n\n  request_and_verify \"POST\" \"/led/toggle\" \"\" \"\"\n  sleep ${DELAY_SECONDS}\n\n  local NEW_STATUS\n  NEW_STATUS=$(curl -s \"http://${FTP_HOST}/led/status\" | jq -r '.state')\n  log \"INFO\" \"New LED state: ${NEW_STATUS}\"\n\n  if [ \"${INITIAL_STATUS}\" == \"${NEW_STATUS}\" ]; then\n    log \"ERRO\" \"LED state did not change after toggle.\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"LED toggle verified successfully.\"\n\n  # Toggle LED back on\n  log \"INFO\" \"Toggling LED back on...\"\n  request_and_verify \"POST\" \"/led/toggle\" \"\" \"\"\n  sleep ${DELAY_SECONDS}\n\n  NEW_STATUS=$(curl -s \"http://${FTP_HOST}/led/status\" | jq -r '.state' | tr '[:lower:]' '[:upper:]')\n  if [ \"${NEW_STATUS}\" != \"ON\" ]; then\n    log \"ERRO\" \"LED failed to turn back on. Current state: ${NEW_STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"LED is ON again.\"\n}\n\nfunction verify_led_brightness() {\n  log \"INFO\" \"Verifying LED brightness...\"\n  local INITIAL_BRIGHTNESS\n  INITIAL_BRIGHTNESS=$(curl -s \"http://${FTP_HOST}/led/brightness\" | jq -r '.brightness')\n  log \"INFO\" \"Initial LED brightness: ${INITIAL_BRIGHTNESS}\"\n\n  local NEW_BRIGHTNESS_VAL=128\n  if [ \"${INITIAL_BRIGHTNESS}\" == \"128\" ]; then\n    NEW_BRIGHTNESS_VAL=255\n  fi\n\n  request_and_verify \"POST\" \"/led/brightness\" \"${NEW_BRIGHTNESS_VAL}\" \"\"\n\n  local NEW_BRIGHTNESS\n  NEW_BRIGHTNESS=$(curl -s \"http://${FTP_HOST}/led/brightness\" | jq -r '.brightness')\n  log \"INFO\" \"New LED brightness: ${NEW_BRIGHTNESS}\"\n\n  if [ \"${NEW_BRIGHTNESS}\" != \"${NEW_BRIGHTNESS_VAL}\" ]; then\n    log \"ERRO\" \"LED brightness did not change as expected.\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"LED brightness verified successfully.\"\n  request_and_verify \"POST\" \"/led/brightness\" \"${INITIAL_BRIGHTNESS}\" \"\"\n}\n\nfunction verify_mqtt_actions() {\n  log \"INFO\" \"Verifying MQTT APIs...\"\n\n  # Test MQTT disable\n  log \"INFO\" \"Testing MQTT disable...\"\n  request_and_verify \"POST\" \"/mqtt/disable\" \"\" \"\"\n  sleep ${DELAY_SECONDS}\n  local ENABLED_STATUS\n  ENABLED_STATUS=$(curl -s \"http://${FTP_HOST}/mqtt/status\" | jq -r '.mqtt_enabled')\n  if [ \"${ENABLED_STATUS}\" != \"false\" ]; then\n    log \"ERRO\" \"MQTT disable failed. Enabled status: ${ENABLED_STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"MQTT is DISABLED.\"\n\n  # Test MQTT disable again (already disabled)\n  log \"INFO\" \"Testing MQTT disable again (already disabled)...\"\n  request_and_verify \"POST\" \"/mqtt/disable\" \"\" \"\"\n  sleep ${DELAY_SECONDS}\n  ENABLED_STATUS=$(curl -s \"http://${FTP_HOST}/mqtt/status\" | jq -r '.mqtt_enabled')\n  if [ \"${ENABLED_STATUS}\" != \"false\" ]; then\n    log \"ERRO\" \"MQTT enabled status changed unexpectedly after disabling again. Current status: ${ENABLED_STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"MQTT is still DISABLED.\"\n\n  # Test MQTT enable\n  log \"INFO\" \"Testing MQTT enable...\"\n  request_and_verify \"POST\" \"/mqtt/enable\" \"\" \"\"\n  sleep ${DELAY_SECONDS}\n  ENABLED_STATUS=$(curl -s \"http://${FTP_HOST}/mqtt/status\" | jq -r '.mqtt_enabled')\n  if [ \"${ENABLED_STATUS}\" != \"true\" ]; then\n    log \"ERRO\" \"MQTT enable failed. Enabled status: ${ENABLED_STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"MQTT is ENABLED.\"\n\n  # Test MQTT enable again (already enabled)\n  log \"INFO\" \"Testing MQTT enable again (already enabled)...\"\n  request_and_verify \"POST\" \"/mqtt/enable\" \"\" \"\"\n  sleep ${DELAY_SECONDS}\n  ENABLED_STATUS=$(curl -s \"http://${FTP_HOST}/mqtt/status\" | jq -r '.mqtt_enabled')\n  if [ \"${ENABLED_STATUS}\" != \"true\" ]; then\n    log \"ERRO\" \"MQTT enabled status changed unexpectedly after enabling again. Current status: ${ENABLED_STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"MQTT is still ENABLED.\"\n\n  # Test MQTT toggle\n  log \"INFO\" \"Verifying MQTT toggle...\"\n  local INITIAL_ENABLED_STATUS\n  INITIAL_ENABLED_STATUS=$(curl -s \"http://${FTP_HOST}/mqtt/status\" | jq -r '.mqtt_enabled')\n  log \"INFO\" \"Initial MQTT enabled status: ${INITIAL_ENABLED_STATUS}\"\n\n  request_and_verify \"POST\" \"/mqtt/toggle\" \"\" \"\"\n  sleep ${DELAY_SECONDS}\n\n  local NEW_ENABLED_STATUS\n  NEW_ENABLED_STATUS=$(curl -s \"http://${FTP_HOST}/mqtt/status\" | jq -r '.mqtt_enabled')\n  log \"INFO\" \"New MQTT enabled status: ${NEW_ENABLED_STATUS}\"\n\n  if [ \"${INITIAL_ENABLED_STATUS}\" == \"${NEW_ENABLED_STATUS}\" ]; then\n    log \"ERRO\" \"MQTT enabled status did not change after toggle.\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"MQTT toggle verified successfully.\"\n\n  # Toggle MQTT back to initial state (ON)\n  log \"INFO\" \"Toggling MQTT back to initial state...\"\n  request_and_verify \"POST\" \"/mqtt/toggle\" \"\" \"\"\n  sleep ${DELAY_SECONDS}\n\n  NEW_ENABLED_STATUS=$(curl -s \"http://${FTP_HOST}/mqtt/status\" | jq -r '.mqtt_enabled')\n  if [ \"${NEW_ENABLED_STATUS}\" != \"true\" ]; then\n    log \"ERRO\" \"MQTT failed to turn back on. Current status: ${NEW_ENABLED_STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"MQTT is ON again.\"\n}\n\nfunction verify_gets(){\n  log \"INFO\" \"Starting API tests for device at ${FTP_HOST}\"\n\n  request_and_verify \"GET\" \"/\" \"\" \".mode .display.status .display.orientation .sd_card.total_size .sd_card.used_size .sd_card.free_size .sd_card.file_count .mqtt.enabled .mqtt.state .mqtt.connected .led.color .led.state .led.brightness\"\n  # request_and_verify \"GET\" \"/mode/msc\" \"\" \".status .message\"\n  # request_and_verify \"GET\" \"/mode/ftp\" \"\" \".status .message\"\n  request_and_verify \"GET\" \"/display/status\" \"\" \".status .display_status\"\n  request_and_verify \"GET\" \"/mqtt/status\" \"\" \".status .mqtt_enabled .mqtt_state .mqtt_connected\"\n  request_and_verify \"GET\" \"/led/status\" \"\" \".status .color .state .brightness\"\n  request_and_verify \"GET\" \"/led/brightness\" \"\" \".status .brightness\"\n}\n\n# Check initial display and LED status\nfunction check_initial_display_and_led_status() {\n  log \"INFO\" \"Verifying initial display and LED status...\"\n  local RESPONSE\n  RESPONSE=$(curl -s \"http://${FTP_HOST}/\")\n\n  local DISPLAY_STATUS\n  DISPLAY_STATUS=$(echo \"${RESPONSE}\" | jq -r '.display.status' | tr '[:lower:]' '[:upper:]')\n  if [ \"${DISPLAY_STATUS}\" != \"ON\" ]; then\n    log \"ERRO\" \"Initial display status is not ON. Current status: ${DISPLAY_STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Initial display status is ON.\"\n\n  local LED_STATUS\n  LED_STATUS=$(echo \"${RESPONSE}\" | jq -r '.led.state' | tr '[:lower:]' '[:upper:]')\n  if [ \"${LED_STATUS}\" != \"ON\" ]; then\n    log \"ERRO\" \"Initial LED status is not ON. Current status: ${LED_STATUS}\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Initial LED status is ON.\"\n}\n\nfunction verify_posts() {\n  log \"INFO\" \"Starting POST API tests...\"\n\n  log \"INFO\" \"--- Display API Tests ---\"\n  verify_display_toggle\n\n  log \"INFO\" \"--- LED API Tests ---\"\n  verify_led_toggle\n  verify_led_brightness\n\n  log \"INFO\" \"--- MQTT API Tests ---\"\n  verify_mqtt_actions\n}\n\nfunction verify_file_upload() {\n  local EXPECTED_STATUS=\"$1\" # \"success\" or \"error\"\n  log \"INFO\" \"Verifying file upload via web server (expecting ${EXPECTED_STATUS})...\"\n\n  # Create a dummy file to upload\n  local DUMMY_FILE=\"test-upload.txt\"\n  local DUMMY_FILENAME=\"test-on-device.txt\"\n  local DUMMY_CONTENT=\"This is a test file for web upload.\"\n  echo \"${DUMMY_CONTENT}\" &gt; \"${DUMMY_FILE}\"\n\n  log \"INFO\" \"Uploading '${DUMMY_FILE}' to the device as '${DUMMY_FILENAME}'...\"\n\n  # Upload the file using curl with POST and multipart/form-data\n  local RESPONSE\n  RESPONSE=$(curl -s -X POST -F \"file=@${DUMMY_FILE};filename=${DUMMY_FILENAME}\" \"http://${FTP_HOST}/upload\")\n\n  # Clean up the dummy file\n  rm \"${DUMMY_FILE}\"\n\n  log \"INFO\" \"Upload response: ${RESPONSE}\"\n\n  # Verify the response\n  local STATUS\n  STATUS=$(echo \"${RESPONSE}\" | jq -r '.status')\n  if [ \"${STATUS}\" != \"${EXPECTED_STATUS}\" ]; then\n    log \"ERRO\" \"File upload returned unexpected status. Got: '${STATUS}', Expected: '${EXPECTED_STATUS}'. Message: $(echo \"${RESPONSE}\" | jq -r '.message')\"\n    exit 1\n  fi\n\n  log \"SUCCESS\" \"File upload test completed with expected status '${EXPECTED_STATUS}'.\"\n}\n\nfunction run_usb_msc_tests(){\n  log \"INFO\" \"=== USB MSC MODE Tests ===\"\n  verify_gets\n  verify_posts\n  verify_file_upload \"error\"\n}\n\nfunction run_ftp_tests() {\n  log \"INFO\" \"=== FTP MODE Tests ===\"\n  log \"INFO\" \"Switching to FTP mode\"\n  request_and_verify \"POST\" \"/mode/ftp\" \"\" \"\"\n  sleep 10\n  verify_gets\n  verify_posts\n  verify_file_upload \"success\"\n  log \"INFO\" \"Switching back to USB MSC mode\"\n  request_and_verify \"POST\" \"/mode/msc\" \"\" \"\"\n  sleep 10\n}\n\n# Main function to orchestrate the script execution\nfunction main() {\n  local START_TIME\n  START_TIME=$(date +%s)\n  log \"INFO\" \"=== Starting \"$0\" ===\"\n  check_dependencies\n  load_vars\n  check_device_status\n  check_initial_mode\n  check_initial_display_and_led_status\n  run_usb_msc_tests\n  run_ftp_tests\n\n  local END_TIME\n  END_TIME=$(date +%s)\n  local DURATION=$((END_TIME - START_TIME))\n  log \"INFO\" \"Script finished in $(($DURATION / 60)) minutes and $(($DURATION % 60)) seconds.\"\n  log \"SUCCESS\" \"=== All API tests completed successfully. ===\"\n}\n\n# Call main to start the script\nmain \"$@\"\n</code></pre>","tags":["usage","building"]},{"location":"building/#testing-the-ftp-server","title":"Testing the FTP Server","text":"<p>The <code>test-ftp.sh</code> script automates testing the FTP server functionality by uploading, downloading, and verifying a test file.</p>","tags":["usage","building"]},{"location":"building/#dependencies_1","title":"Dependencies","text":"<p>You must have the following dependencies installed on your system:</p> <ul> <li><code>curl</code>: For interacting with web services (used to check device status).</li> <li><code>jq</code>: A lightweight and flexible command-line JSON processor.</li> <li><code>lftp</code>: A sophisticated file transfer program.</li> </ul> Debian/UbuntumacOS (Homebrew) <pre><code>sudo apt install curl jq lftp\n</code></pre> <pre><code>brew install curl jq lftp\n</code></pre>","tags":["usage","building"]},{"location":"building/#configuration_1","title":"Configuration","text":"<p>The script requires an <code>.env</code> file with the device's FTP host, username, and password.</p> <ol> <li> <p>Copy the template <code>.env</code> File:</p> <pre><code>cp scripts/.env.tmpl scripts/.env\n</code></pre> </li> <li> <p>Edit <code>scripts/.env</code>: Update the <code>FTP_HOST</code>, <code>FTP_USER</code>, and <code>FTP_PASSWORD</code> variables with your device's credentials.</p> </li> </ol> <p>scripts/.env</p> <pre><code>FTP_HOST=\"192.168.2.169\"\nFTP_USER=\"user\"\nFTP_PASSWORD=\"password\"\nWEB_SERVER_USER=\"\"\nWEB_SERVER_PASSWORD=\"\"\nLOCAL_DIR=\"data\"\nREMOTE_DIR=\"/\"\n</code></pre>","tags":["usage","building"]},{"location":"building/#script-usage_1","title":"Script Usage","text":"<ol> <li>Ensure the device is in FTP Server Mode.</li> <li>Run the script from the scripts directory:</li> </ol> TaskBash <pre><code>task test-ftp\n</code></pre> <pre><code>cd scripts\n./test-ftp.sh\n</code></pre> test-ftp.sh <pre><code>#!/usr/bin/env bash\n################################################################################\n#\n# test-ftp.sh\n# ----------------\n# Tests the FTP functionality of the FrameFi device by uploading, downloading,\n# and verifying a test file.\n#\n# @author Nicholas Wilde, 0xb299a622\n# @date 17 Aug 2025\n# @version 0.1.0\n#\n################################################################################\n\n# Options\nset -e\nset -o pipefail\n\n# These are constants\nRED=$(tput setaf 1)\nGREEN=$(tput setaf 2)\nYELLOW=$(tput setaf 3)\nBLUE=$(tput setaf 4)\nRESET=$(tput sgr0)\nreadonly RED GREEN YELLOW BLUE RESET\n\nDELAY_SECONDS=1\nreadonly DELAY_SECONDS\n\nTEST_FILE_NAME=\"test_ftp_file.txt\"\nreadonly TEST_FILE_NAME\n\nTEST_FILE_CONTENT=\"This is a test file for FTP functionality.\"\nreadonly TEST_FILE_CONTENT\n\n# Log function for standardized output\nfunction log() {\n  local TYPE=\"$1\"\n  local MESSAGE=\"$2\"\n  local COLOR=\"\"\n  local EMOJI=\"\"\n\n  case \"$TYPE\" in\n    \"INFO\") COLOR=\"${BLUE}\"; EMOJI=\"\";;\n    \"WARN\") COLOR=\"${YELLOW}\"; EMOJI=\"\u26a0\ufe0f \";;\n    \"ERRO\") COLOR=\"${RED}\"; EMOJI=\"\u274c \";;\n    \"SUCCESS\") COLOR=\"${BLUE}\"; EMOJI=\"\u2705 \"; TYPE=\"INFO\";;\n    *) COLOR=\"${RESET}\";;\n  esac\n\n  echo \"${COLOR}${TYPE}${RESET}[$(date +'%Y-%m-%d %H:%M:%S')] ${EMOJI}${MESSAGE}\"\n}\n\n# Check for dependencies\nfunction check_dependencies() {\n  log \"INFO\" \"Checking dependencies...\"\n  if ! command -v curl &amp;&gt; /dev/null; then\n    log \"ERRO\" \"curl could not be found. Please install it.\"\n    exit 1\n  fi\n  if ! command -v jq &amp;&gt; /dev/null; then\n    log \"ERRO\" \"jq could not be found. Please install it.\"\n    exit 1\n  fi\n  if ! command -v lftp &amp;&gt; /dev/null; then\n    log \"ERRO\" \"lftp could not be found. Please install it.\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Dependencies checked.\"\n}\n\nfunction load_vars() {\n  local ENV_FILE=\"$(dirname \"$0\")/.env\"\n\n  if [ ! -f \"${ENV_FILE}\" ]; then\n    log \"ERRO\" \"Environment file not found: ${ENV_FILE}\"\n    log \"ERRO\" \"Please create it from .env.tmpl and ensure FTP_HOST, FTP_USER, FTP_PASSWORD are set.\"\n    exit 1\n  fi\n\n  source \"${ENV_FILE}\"\n\n  if [ -z \"${FTP_HOST}\" ] || [ -z \"${FTP_USER}\" ] || [ -z \"${FTP_PASSWORD}\" ]; then\n    log \"ERRO\" \"FTP_HOST, FTP_USER, or FTP_PASSWORD not set in ${ENV_FILE}\"\n    exit 1\n  fi\n}\n\n# Check if the device is online\nfunction check_device_status() {\n  log \"INFO\" \"Checking if device at ${FTP_HOST} is online...\"\n  if ! curl -s -o /dev/null --fail --connect-timeout 5 \"http://${FTP_HOST}/\"; then\n    log \"ERRO\" \"Device at ${FTP_HOST} is not responding.\"\n    log \"ERRO\" \"Please ensure the device is connected to the network and the IP address is correct.\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Device is online.\"\n}\n\n# Check device mode\nfunction check_device_mode() {\n  log \"INFO\" \"Verifying device mode is FTP...\"\n  local RESPONSE\n  RESPONSE=$(curl -s \"http://${FTP_HOST}/\")\n  local CURRENT_MODE\n  CURRENT_MODE=$(echo \"${RESPONSE}\" | jq -r '.mode')\n\n  if [ \"${CURRENT_MODE}\" != \"Application (FTP Server)\" ]; then\n    log \"ERRO\" \"Device is not in FTP mode. Current mode: ${CURRENT_MODE}\"\n    log \"ERRO\" \"Please set the device to FTP mode before running tests (e.g., curl -X POST http://${FTP_HOST}/mode/ftp).\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Device is in FTP mode.\"\n}\n\n# Function to upload a test file\nfunction upload_test_file() {\n  log \"INFO\" \"Creating local test file: ${TEST_FILE_NAME}\"\n  echo \"${TEST_FILE_CONTENT}\" &gt; \"${TEST_FILE_NAME}\"\n\n  log \"INFO\" \"Uploading ${TEST_FILE_NAME} to FTP server at ${FTP_HOST}...\"\n  lftp -c \"\n  set ftp:ssl-allow no;\n  open -u \"${FTP_USER}\",\"${FTP_PASSWORD}\" \"${FTP_HOST}\";\n  put -O / \"${TEST_FILE_NAME}\";\n  \"\n  if [ $? -ne 0 ]; then\n    log \"ERRO\" \"Failed to upload ${TEST_FILE_NAME}.\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Successfully uploaded ${TEST_FILE_NAME}.\"\n}\n\n# Function to download a test file\nfunction download_test_file() {\n  log \"INFO\" \"Downloading ${TEST_FILE_NAME} from FTP server at ${FTP_HOST}...\"\n  lftp -c \"\n  set ftp:ssl-allow no;\n  set xfer:clobber true;\n  open -u \"${FTP_USER}\",\"${FTP_PASSWORD}\" \"${FTP_HOST}\";\n  get -O . \"${TEST_FILE_NAME}\";\n  \"\n  if [ $? -ne 0 ]; then\n    log \"ERRO\" \"Failed to download ${TEST_FILE_NAME}.\"\n    exit 1\n  fi\n  log \"SUCCESS\" \"Successfully downloaded ${TEST_FILE_NAME}.\"\n}\n\n# Function to verify the content of the downloaded file\nfunction verify_downloaded_file() {\n  log \"INFO\" \"Verifying content of downloaded file: ${TEST_FILE_NAME}\"\n  local DOWNLOADED_CONTENT\n  DOWNLOADED_CONTENT=$(cat \"${TEST_FILE_NAME}\")\n\n  if [ \"${DOWNLOADED_CONTENT}\" == \"${TEST_FILE_CONTENT}\" ]; then\n    log \"SUCCESS\" \"Content of ${TEST_FILE_NAME} matches expected content.\"\n  else\n    log \"ERRO\" \"Content mismatch for ${TEST_FILE_NAME}.\"\n    log \"ERRO\" \"Expected: '${TEST_FILE_CONTENT}'\"\n    log \"ERRO\" \"Got:      '${DOWNLOADED_CONTENT}'\"\n    exit 1\n  fi\n}\n\n# Function to delete the test file from the FTP server\n# Function to delete the test file from the FTP server\nfunction delete_test_file_remote() {\n  log \"INFO\" \"Attempting to delete ${TEST_FILE_NAME} from FTP server at ${FTP_HOST} for cleanup...\"\n  local LFTP_OUTPUT\n  local LFTP_EXIT_CODE\n\n  # Execute lftp command, capture stderr and stdout\n  LFTP_OUTPUT=$(lftp -c \"set ftp:ssl-allow no; open -u \\\"${FTP_USER}\\\",\\\"${FTP_PASSWORD}\\\" \\\"${FTP_HOST}\\\"; rm \\\"${TEST_FILE_NAME}\\\";\")\n  LFTP_EXIT_CODE=$?\n\n  if [ ${LFTP_EXIT_CODE} -ne 0 ]; then\n    if echo \"${LFTP_OUTPUT}\" | grep -q \"550 ${TEST_FILE_NAME}: No such file or directory\"; then\n      log \"WARN\" \"File ${TEST_FILE_NAME} not found on remote during cleanup. This is expected if it didn't exist.\"\n    else\n      log \"ERRO\" \"Failed to delete ${TEST_FILE_NAME} from remote. Error: ${LFTP_OUTPUT}\"\n      exit 1\n    fi\n  else\n    log \"SUCCESS\" \"Successfully deleted ${TEST_FILE_NAME} from remote.\"\n  fi\n}\n\n# Function to clean up local test file\nfunction cleanup_local_file() {\n  if [ -f \"${TEST_FILE_NAME}\" ]; then\n    log \"INFO\" \"Cleaning up local test file: ${TEST_FILE_NAME}\"\n    rm \"${TEST_FILE_NAME}\"\n    log \"SUCCESS\" \"Successfully removed local test file.\"\n  fi\n}\n\n# Main function to orchestrate the script execution\nfunction main() {\n  local START_TIME\n  START_TIME=$(date +%s)\n  log \"INFO\" \"=== Starting \"$0\" ===\"\n\n  check_dependencies\n  load_vars\n  check_device_status\n  check_device_mode\n\n  # Ensure clean state before starting tests\n  delete_test_file_remote\n  cleanup_local_file\n\n  upload_test_file\n  download_test_file\n  verify_downloaded_file\n  delete_test_file_remote\n  cleanup_local_file\n\n  local END_TIME\n  END_TIME=$(date +%s)\n  local DURATION=$((END_TIME - START_TIME))\n  log \"INFO\" \"Script finished in $(($DURATION / 60)) minutes and $(($DURATION % 60)) seconds.\"\n  log \"SUCCESS\" \"=== All FTP tests completed successfully. ===\"\n}\n\n# Call main to start the script\nmain \"$@\"\n</code></pre>","tags":["usage","building"]},{"location":"building/#references","title":"References","text":"<ul> <li>Task</li> </ul>","tags":["usage","building"]},{"location":"contributing/","title":"Contributing","text":"<p>First off, thank you for considering contributing to FrameFi. It's people like you that make open source such a great community.</p>","tags":["contributing"]},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you find a bug, please open an issue on our GitHub Issues page.</p> <p>Please include the following in your bug report:</p> <ul> <li>A clear and descriptive title.</li> <li>A detailed description of the problem, including steps to reproduce it.</li> <li>The expected behavior and what actually happened.</li> <li>Your hardware setup (e.g., board version, microSD card size).</li> <li>The version of the firmware you are running.</li> </ul>","tags":["contributing"]},{"location":"contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>If you have an idea for a new feature or an improvement to an existing one, please open an issue on our GitHub Issues page.</p> <p>Please include the following in your enhancement suggestion:</p> <ul> <li>A clear and descriptive title.</li> <li>A detailed description of the proposed enhancement.</li> <li>Any relevant mockups or examples.</li> </ul>","tags":["contributing"]},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>We welcome pull requests. If you'd like to contribute code, please follow these steps:</p> <ol> <li>Fork the repository.</li> <li>Create a new branch for your feature or bug fix.</li> <li>Make your changes, adhering to the project's coding and documentation standards.</li> <li>Submit a pull request with a clear description of your changes.</li> </ol>","tags":["contributing"]},{"location":"contributing/#code-style","title":"Code Style","text":"<p>This project follows the GEMINI C++ Style Guide. Please ensure your code adheres to these standards.</p> <p>Key points</p> <ul> <li>Function names must be <code>lowerCamelCase</code>.</li> <li>Every function must have a single-line documentation brief.</li> <li>Implementation comments must use the <code>// --- comment text ---</code> style.</li> </ul>","tags":["contributing"]},{"location":"contributing/#documentation-style","title":"Documentation Style","text":"<p>All documentation is written in Markdown and generated using MkDocs with the Material theme. Please follow the Markdown Documentation Guidelines.</p> <p>Key points</p> <ul> <li>Use clear and descriptive headings with emojis.</li> <li>Use admonitions to highlight important information.</li> <li>Specify the language for code blocks.</li> <li>Add new pages to the <code>nav</code> section of <code>mkdocs.yml</code>.</li> </ul>","tags":["contributing"]},{"location":"contributing/#versioning","title":"Versioning","text":"<p>The firmware version is automatically generated based on the <code>git</code> history of the repository, so you don't need to set it manually. This ensures that each build is traceable to a specific point in the code's history.</p> <p>The version string is derived using the <code>git describe --tags --dirty --always</code> command. Here's how it works:</p> <ul> <li>Tags: The base version number comes from the most recent <code>git</code> tag (e.g., <code>v1.2.0</code>). It's crucial to tag releases in the format <code>vX.Y.Z</code>.</li> <li>Commit Hash: If you have made commits since the last tag, the version will include the number of commits and the short hash of the latest commit (e.g., <code>v1.2.0-4-g1a2b3c4</code>). This indicates it's a development build.</li> <li>Dirty State: If you have uncommitted changes in your local working directory when you build the firmware, the version string will have a <code>-dirty</code> suffix (e.g., <code>v1.2.0-4-g1a2b3c4-dirty</code>). This is a clear indicator that the build was made from code that doesn't exactly match any commit in the repository, which is useful for debugging.</li> </ul> <p>This automated versioning helps maintain a clear and consistent understanding of what code is running on a device at any given time.</p>","tags":["contributing"]},{"location":"contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the Apache License 2.0.</p>","tags":["contributing"]},{"location":"contributing/#references","title":"References","text":"<ul> <li>https://github.com/nicholaswilde/frame-fi/blob/main/LICENSE</li> </ul>","tags":["contributing"]},{"location":"display/","title":"Display","text":"<p>The LCD display uses the TFT_eSPI library to show device status and network information. The content of the display changes depending on the current operating mode.</p> <p>Screens</p> BootUSB Mass Storage ModeFTP Server ModeAP Mode <p>When the device is booting, the device shows:</p> <pre><code>Booting...\n\n version\n</code></pre> <p>When in USB MSC mode, the display shows:</p> <ul> <li>Mode: USB MSC</li> <li>IP: The device's current IP address.</li> <li>MAC: The device's MAC address.</li> <li>Size: The total size of the microSD card.</li> <li>Files: The number of files on the microSD card.</li> <li>Used: The amount of used space on the microSD card.</li> </ul> <p>When in FTP mode, the display shows:</p> <ul> <li>Mode: FTP</li> <li>IP: The device's current IP address.</li> <li>MAC: The device's MAC address.</li> <li>Size: The total size of the microSD card.</li> <li>Files: The number of files on the microSD card.</li> <li>Used: The amount of used space on the microSD card.</li> </ul> <p>When in Wi-Fi Access Point mode for configuration, the display shows:</p> <ul> <li>Mode: AP</li> <li>IP: The AP's IP address (usually <code>192.168.4.1</code>).</li> <li>MAC: The device's MAC address.</li> <li>SSID: The name of the Access Point (<code>AutoConnectAP-FrameFi</code>).</li> </ul>","tags":["usage","display"]},{"location":"display/#display-orientation","title":"Display Orientation","text":"<p>You can change the screen orientation by modifying the <code>platformio.ini</code> file.</p> <ol> <li>Open <code>platformio.ini</code>: Open the <code>platformio.ini</code> file in the root of the project.</li> <li>Find <code>DISPLAY_ORIENTATION</code>: Locate the <code>build_flags</code> section and find the <code>-D DISPLAY_ORIENTATION</code> line.</li> <li> <p>Change the Value: Change the value to one of the following:</p> Value Description <code>0</code> Portrait <code>1</code> Landscape (Default) <code>2</code> Portrait Inverted <code>3</code> Landscape Inverted </li> <li> <p>Rebuild and Upload: Save the file, then rebuild and upload the firmware for the change to take effect.</p> </li> </ol> <p>platformio.ini</p> <pre><code>[env]\n...\nbuild_flags =\n  ...\n  -D DISPLAY_ORIENTATION=1\n</code></pre>","tags":["usage","display"]},{"location":"display/#enabledisable-lcd","title":"Enable/Disable LCD","text":"<p>You can completely enable or disable the LCD screen backlight by modifying the <code>platformio.ini</code> file. This is useful for saving power if you don't need the display.</p> <p>Tip</p> <p>The screen can also be enabled and disabled via the web API.</p> <ol> <li>Open <code>platformio.ini</code>: Open the <code>platformio.ini</code> file in the root of the project.</li> <li>Find <code>LCD_ENABLED</code>: Locate the <code>build_flags</code> section and find the <code>-D LCD_ENABLED</code> line.</li> <li> <p>Change the Value:</p> Value Description <code>1</code> Enable the LCD (Default) <code>0</code> Disable the LCD </li> <li> <p>Rebuild and Upload: Save the file, then rebuild and upload the firmware for the change to take effect.</p> </li> </ol> <p>platformio.ini</p> <pre><code>[env]\n...\nbuild_flags =\n  ...\n  -D LCD_ENABLED=1\n</code></pre>","tags":["usage","display"]},{"location":"display/#theme","title":"Theme","text":"<p>You can customize the color scheme of the display by selecting a Catppuccin theme in the <code>platformio.ini</code> file.</p> <ol> <li>Open <code>platformio.ini</code>: Open the <code>platformio.ini</code> file in the root of the project.</li> <li>Find <code>custom_catppuccin_theme</code>: Locate the <code>[env]</code> section and find the <code>custom_catppuccin_theme</code> option.</li> <li>Change the Value: Change the value to one of the following:<ul> <li><code>Mocha</code> (Default)</li> <li><code>Macchiato</code></li> <li><code>Frappe</code></li> <li><code>Latte</code></li> </ul> </li> <li>Rebuild and Upload: Save the file, then rebuild and upload the firmware for the change to take effect.</li> </ol> <p>platformio.ini</p> <pre><code>[env]\n...\ncustom_catppuccin_theme = Mocha\n</code></pre> <p>Note</p> <p>The file <code>catppuccin_colors.h</code> is automatically generated. Do not edit.</p>","tags":["usage","display"]},{"location":"display/#references","title":"References","text":"<ul> <li>&lt;TFT_eSPI&gt;</li> <li>&lt;Catppuccin&gt;</li> </ul>","tags":["usage","display"]},{"location":"flashing-firmware/","title":"Flashing the Firmware","text":"<p>This guide provides instructions on how to flash the latest firmware to your device. You can use the automated <code>flash.sh</code> script for a streamlined experience, or follow the manual instructions for more control.</p>","tags":["usage","flashing"]},{"location":"flashing-firmware/#automated-flashing-with-flashsh","title":"Automated Flashing with <code>flash.sh</code>","text":"<p>The <code>flash.sh</code> script automates the process of downloading the latest release and flashing it to your device.</p>","tags":["usage","flashing"]},{"location":"flashing-firmware/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following dependencies installed:</p> <ul> <li><code>curl</code>: For downloading files from the internet.</li> <li><code>grep</code>: For text searching.</li> <li><code>unzip</code>: For extracting zip archives.</li> <li><code>esptool</code>: A tool for communicating with Espressif chips.</li> </ul> <p>You can typically install these using your system's package manager. For <code>esptool</code>, you can install it with pip:</p> <pre><code>pip install esptool\n</code></pre>","tags":["usage","flashing"]},{"location":"flashing-firmware/#usage","title":"Usage","text":"<ol> <li> <p>Connect your device: Ensure your ESP32-S3 device is connected to your computer.</p> </li> <li> <p>Run the script: Execute the <code>flash.sh</code> script from the <code>scripts</code> directory or remotely from GitHub.</p> Task  (Default Port)Local Execution (Default Port)Local Execution (Custom Port)Remote Execution (Default Port)Remote Execution (Custom Port) <pre><code>task flash\n</code></pre> <p>By default, the script uses <code>/dev/ttyACM0</code> as the serial port.</p> <pre><code>./scripts/flash.sh\n</code></pre> <p>If your device is on a different port, you can specify it as an argument.</p> <pre><code>./scripts/flash.sh /dev/ttyUSB0\n</code></pre> <p>You can run the script directly from GitHub without cloning the repository.</p> <pre><code>bash -c \"$(curl -fsSL https://raw.githubusercontent.com/nicholaswilde/frame-fi/main/scripts/flash.sh)\"\n</code></pre> <p>To specify a custom port when running remotely, pass it as an argument after the script execution command.</p> <pre><code>bash -c \"$(curl -fsSL https://raw.githubusercontent.com/nicholaswilde/frame-fi/main/scripts/flash.sh)\" _ /dev/ttyUSB0\n</code></pre> </li> </ol> <p>Security Risk</p> <p>Running a script directly from the internet with <code>bash -c \"$(curl...)\"</code> is a potential security risk. Always review the script's source code before executing it to ensure it is safe. You can view the script here.</p> <p>The script will then:</p> <ol> <li>Fetch the latest release from the nicholaswilde/frame-fi repository.</li> <li>Download the release archive to a temporary directory.</li> <li>Extract the necessary <code>.bin</code> files.</li> <li>Flash the firmware to your device using <code>esptool</code>.</li> </ol>","tags":["usage","flashing"]},{"location":"flashing-firmware/#manual-flashing","title":"Manual Flashing","text":"<p>If you don't want to build the project from source, you can flash a pre-compiled release directly to your device.</p> <ul> <li>Download the Latest Release:<ul> <li>Go to the Releases page.</li> <li>Download the zip file from the latest release.</li> <li>Unzip the archive. It will contain <code>firmware.bin</code>, <code>partitions.bin</code>, and <code>bootloader.bin</code>.</li> <li>Optionally, download the <code>boot_app0.bin</code> file from espressive/arduino-esp32.</li> </ul> </li> </ul> <pre><code>wget https://github.com/espressif/arduino-esp32/raw/refs/heads/master/tools/partitions/boot_app0.bin\n</code></pre> <p>Warning</p> <p>The version of <code>boot_app0.bin</code> is critical. Using a version that is incompatible with your ESP32-S3's silicon revision can result in a soft-bricked device that is difficult to recover. The link provided is for the master branch of the <code>arduino-esp32</code> repository and should be compatible with most devices.</p> <ul> <li>Install esptool:     If you have PlatformIO installed, you already have <code>esptool.py</code>. If not, you can install it with pip:</li> </ul> <pre><code>pip install esptool\n</code></pre> <ul> <li>Flash the Device:<ul> <li>Put your T-Dongle-S3 into bootloader mode. You can usually do this by holding down the <code>BOOT</code> button (the one on the side), plugging it into your computer, and then releasing the button.</li> <li>Find the serial port of your device. It will be something like <code>COM3</code> on Windows, <code>/dev/ttyUSB0</code> on Linux, or <code>/dev/cu.serial-XXXX</code> on macOS.</li> <li>Run the following command, replacing <code>&lt;YOUR_SERIAL_PORT&gt;</code> with your device's port:</li> </ul> </li> </ul> Without boot_app0With boot_app0 <pre><code>esptool.py \\\n    --chip esp32s3 \\\n    --port &lt;YOUR_SERIAL_PORT&gt; \\\n    --baud 921600 \\\n    --before default_reset \\\n    --after hard_reset \\\n    write_flash \\\n      -z \\\n      --flash_mode dio \\\n      --flash_freq 80m \\\n      --flash_size 16MB \\\n      0x0000 bootloader.bin \\\n      0x8000 partitions.bin \\\n      0x10000 firmware.bin\n</code></pre> <pre><code>esptool.py \\\n    --chip esp32s3 \\\n    --port &lt;YOUR_SERIAL_PORT&gt; \\\n    --baud 921600 \\\n    --before default_reset \\\n    --after hard_reset \\\n    write_flash \\\n      -z \\\n      --flash_mode dio \\\n      --flash_freq 80m \\\n      --flash_size 16MB \\\n      0x0000 bootloader.bin \\\n      0xe000 boot_app0.bin \\\n      0x8000 partitions.bin \\\n      0x10000 firmware.bin\n</code></pre> Address Bin File 0x0000 <code>bootloader.bin</code> 0xe000 <code>boot_app0.bin</code> 0x8000 <code>partitions.bin</code> 0x10000 <code>firmware.bin</code> <ul> <li>Reboot the Device:<ul> <li>After the flashing process is complete, unplug the dongle from your computer and plug it back in to reboot it.</li> </ul> </li> </ul> <p>Tip</p> <p>If you have PlatformIO installed, you can use the <code>pio run --target upload</code> command, which handles the flashing process automatically.</p> <ul> <li> <p>Flash with Web Installer (Recommended for beginners):</p> <ul> <li>Go to the ESP Web Flasher website.</li> <li>Put your T-Dongle-S3 into bootloader mode. You can usually do this by holding down the <code>BOOT</code> button (the one on the side), plugging it into your computer, and then releasing the button.</li> <li>Click the \"Connect\" button and select your device's serial port.</li> <li>Select the <code>.bin</code> files you downloaded from the latest release and enter their corresponding addresses:</li> </ul> Address Bin File 0x0000 <code>bootloader.bin</code> 0xe000 <code>boot_app0.bin</code> 0x8000 <code>partitions.bin</code> 0x10000 <code>firmware.bin</code> <ul> <li>Click \"Install\" to flash the firmware.</li> </ul> </li> </ul>","tags":["usage","flashing"]},{"location":"flashing-firmware/#references","title":"References","text":"<ul> <li>&lt;FrameFi Latest Release&gt;</li> <li>&lt;FrameFi Releases&gt;</li> <li>&lt;espressif/arduino-esp32&gt;</li> <li>&lt;ESP Web Flasher&gt;</li> </ul>","tags":["usage","flashing"]},{"location":"ftp-access/","title":"FTP Access","text":"<p>When the device is in FTP Server Mode, you can access the microSD card over the network using an FTP client.</p> <p>Insecure Protocol</p> <p>FTP is an inherently insecure protocol that transmits data, including credentials, in plain text. Only use this feature on a trusted, private network.</p> <ol> <li> <p>Switch to FTP Mode:</p> <ul> <li>Press the onboard button (single click) to switch from MSC to FTP mode.</li> <li>Alternatively, use the web API by sending a <code>POST</code> request to <code>/mode/ftp</code>.</li> </ul> </li> <li> <p>Connect with an FTP Client:</p> <ul> <li>Use any standard FTP client (e.g., &lt;FileZilla&gt;, &lt;WinSCP&gt;, or the command-line <code>ftp</code>).</li> <li>Host: The IP address of your device (shown on the LCD).</li> <li>Port: <code>21</code> (the default FTP port).</li> <li>Username: The username you configured in the WiFiManager setup page (default: <code>user</code>).</li> <li>Password: The password you configured in the WiFiManager setup page (default: <code>password</code>).</li> </ul> </li> <li> <p>Upload File:</p> <ol> <li> <p>Open the Command Line:</p> <ol> <li>Windows: Open the Command Prompt or PowerShell.</li> <li>macOS or Linux: Open the Terminal application.</li> </ol> </li> <li> <p>Connect to the FTP Server: Type the ftp command followed by the server address:</p> <pre><code>ftp &lt;HOST&gt;\n</code></pre> </li> <li> <p>Enter Your Credentials: The server will prompt you for your username and password.</p> </li> <li> <p>List Remote Files (Optional): You can list the files on the device by using the <code>ls</code> command:</p> <pre><code>ls\n</code></pre> </li> <li> <p>Navigate to the Local Directory (Optional): If the file you want to upload is not in your current local directory, you can change your local directory using the <code>lcd</code> (local change directory) command:</p> <pre><code>lcd /path/to/data\n</code></pre> </li> <li> <p>Upload a Single File: Use the <code>put</code> command followed by the name of the file you want to upload:</p> <pre><code>put my-picture.png\n</code></pre> </li> </ol> </li> </ol> <p>Using Web API</p> <p>You can also upload images using the Web API.</p> <p>Using lftp</p> <p>For automated synchronization, the <code>scripts/sync.sh</code> script uses <code>lftp</code> to mirror a local directory to the device. See the Synchronizing Files section for more details.</p>","tags":["usage","ftp"]},{"location":"ftp-access/#references","title":"References","text":"<ul> <li>&lt;lftp&gt;</li> </ul>","tags":["usage","ftp"]},{"location":"getting-started/","title":"Getting Started","text":"<p>Before building, you need to configure your credentials and format your SD card.</p>","tags":["getting-started"]},{"location":"getting-started/#configuration","title":"Configuration","text":"","tags":["getting-started"]},{"location":"getting-started/#formatting-the-microsd-card","title":"Formatting the microSD Card","text":"<p>The microSD card must be formatted as FAT32.</p> <p>Warning</p> <p>Formatting the card will erase all of its contents. Back up any important files before proceeding.</p> <ul> <li> <p>Windows:</p> <ol> <li>Insert the microSD card into your computer.</li> <li>Open File Explorer, right-click on the SD card drive, and select Format.</li> <li>Choose FAT32 from the \"File system\" dropdown menu.</li> <li>Click Start.</li> </ol> </li> <li> <p>macOS:</p> <ol> <li>Insert the microSD card.</li> <li>Open Disk Utility.</li> <li>Select the SD card from the list on the left.</li> <li>Click Erase.</li> <li>Choose MS-DOS (FAT) from the \"Format\" dropdown.</li> <li>Click Erase.</li> </ol> </li> <li> <p>Linux:</p> <ol> <li>Insert the microSD card.</li> <li>Open a terminal and run <code>lsblk</code> to identify the device name (e.g., <code>/dev/sdX</code>).</li> <li>Unmount the card if it's auto-mounted: <code>sudo umount /dev/sdX*</code>.</li> <li>Format the card: <code>sudo mkfs.vfat -F 32 /dev/sdX1</code> (assuming the partition is <code>/dev/sdX1</code>).</li> </ol> </li> </ul>","tags":["getting-started"]},{"location":"getting-started/#configure-credentials","title":"Configure Credentials","text":"<ol> <li>Create <code>secrets.h</code>: In the <code>include/</code> directory, create a file named <code>secrets.h</code>.</li> <li>Add Credentials: Copy the contents of <code>include/secrets.h.tmpl</code> into your new <code>secrets.h</code> file and update the values. This file contains the credentials for the Wi-Fi Manager Access Point and the FTP server.</li> </ol> <p>include/secrets.h</p> <pre><code>#pragma once\n\n// --- WiFi Credentials ---\n// Not currently used.\n#define WIFI_SSID \"YourWiFiNetworkName\"\n#define WIFI_PASSWORD \"YourWiFiPassword\"\n\n// --- AP Mode ---\n// #define WIFI_AP_SSID \"AutoConnectAP-FrameFi\"\n// #define WIFI_AP_PASSWORD \"password\"\n\n// --- Web Server ---\n// #define WEB_SERVER_USER \"admin\"\n// #define WEB_SERVER_PASSWORD \"password\"\n\n// --- FTP Mode ---\n// #define FTP_USER \"user\"\n// #define FTP_PASSWORD \"password\"\n\n// --- MQTT ---\n// #define MQTT_CLIENT_ID \"FrameFi\" // Must be unique on the MQTT network\n// #define MQTT_HOST \"192.168.1.100\"\n// #define MQTT_PORT 1883\n// #define MQTT_USER \"user\"\n// #define MQTT_PASSWORD \"password\"\n</code></pre> <p>Note</p> <p>This project uses <code>WiFiManager</code> to handle Wi-Fi connections via a captive portal, so you don't need to hardcode your network credentials. The <code>WIFI_SSID</code> and <code>WIFI_PASSWORD</code> fields in <code>secrets.h</code> are placeholders for a potential future feature and are not currently used.</p>","tags":["getting-started"]},{"location":"getting-started/#wi-fi-and-mqtt-setup","title":"Wi-Fi and MQTT Setup","text":"<p>When you first boot the device, it will create a Wi-Fi Access Point (AP) that you can connect to from your computer or phone to configure its Wi-Fi connection.</p> <p>Tip</p> <p>Configure FTP and MQTT settings first in the <code>Setup</code> page before configuring Wi-Fi to avoid terminating WiFiManager.</p> <p></p> <ul> <li>SSID: By default, the AP name is <code>FrameFi-&lt;MAC&gt;</code>, where <code>&lt;MAC&gt;</code> is the last 6 characters of the device's MAC address. This is configured by leaving <code>WIFI_AP_SSID</code> commented out in <code>secrets.h</code>. To set a custom SSID, uncomment <code>WIFI_AP_SSID</code> and provide your own name.</li> <li>Password: By default, the AP is open and does not require a password. To set a password, uncomment <code>WIFI_AP_PASSWORD</code> in <code>secrets.h</code> and provide a password.</li> </ul> <p>In the WiFiManager Configure WiFi page, you can also configure the following:</p> <ul> <li>Wi-Fi Credentials: Set the <code>SSID</code> and <code>password</code> for the Wi-Fi network the device is to connect to. </li> </ul> <p></p> <p>In the WiFiManager setup page, you can also configure the following:</p> <ul> <li>FTP Credentials: Set the username and password for the FTP server. The values in <code>secrets.h</code> are used as the default values on the portal.</li> <li>MQTT Settings: Configure the MQTT broker, port, username, and password. The values in <code>secrets.h</code> are used as the default values on the portal.</li> </ul> <p>Tip</p> <p>Hit the back button twice to get back to the main page after saving FTP and MQTT settings.</p> <p></p>","tags":["getting-started"]},{"location":"getting-started/#secrets-management","title":"Secrets Management","text":"<p>This project uses sops for encrypting and decrypting secrets. The following files are encrypted:</p> <ul> <li><code>include/secrets.h</code></li> <li><code>scripts/.env</code></li> </ul> <p>The above files are ignored by git to prevent the accidental comitting of secrets.</p> <p><code>*.enc</code> files are saved encrypted secrets for making it easier to save credentials.</p>","tags":["getting-started"]},{"location":"getting-started/#decrypting-secrets","title":"Decrypting Secrets","text":"<p>To decrypt the files, run the following command:</p> TaskSOPS <pre><code>task decrypt\n</code></pre> <pre><code>sops -d include/secrets.h.enc &gt; include/secrets.h\nsops -d --input-type dotenv --output-type dotenv scripts/.env.enc &gt; scripts/.env\n</code></pre>","tags":["getting-started"]},{"location":"getting-started/#encrypting-secrets","title":"Encrypting Secrets","text":"<p>Note</p> <p>Before encrypting any files, you must add your GPG key's fingerprint or other public key information to the <code>.sops.yaml</code> file at the root of the project. This authorizes you to encrypt and decrypt the files.</p> <p>To encrypt the files after making changes, run the following command:</p> TaskSOPS <pre><code>task encrypt\n</code></pre> <pre><code>sops -e include/secrets.h &gt; include/secrets.h.enc\nsops -e --input-type dotenv --output-type dotenv scripts/.env &gt; scripts/.env.enc\n</code></pre>","tags":["getting-started"]},{"location":"getting-started/#references","title":"References","text":"<ul> <li>https://github.com/catppuccin/catppuccin</li> <li>https://github.com/getsops/sops</li> <li>https://github.com/tzapu/WiFiManager</li> </ul>","tags":["getting-started"]},{"location":"hardware/","title":"Hardware Requirements","text":"<ul> <li>LILYGO T-Dongle S3: This project is specifically designed for this board.</li> <li>microSD Card: A FAT32 formatted microSD card is required to store pictures and files. The sketch has been tested with a 16GB card.</li> <li>Digital Picture Frame: A digital picture frame that can use a USB storage device to serve pictures.</li> </ul>","tags":["hardware"]},{"location":"hardware/#references","title":"References","text":"<ul> <li>LILYGO T-Dongle S3</li> </ul>","tags":["hardware"]},{"location":"home-assistant/","title":"Home Assistant Integration","text":"<p>This page provides an example of how to integrate FrameFi with &lt;Home Assistant&gt; using MQTT.</p>","tags":["home-assistant","mqtt"]},{"location":"home-assistant/#prerequisites","title":"Prerequisites","text":"<ul> <li>MQTT is enabled and configured on your FrameFi device.</li> <li>You have a running MQTT broker that is accessible by both Home Assistant and your FrameFi.</li> <li>You have the &lt;MQTT integration&gt; set up in Home Assistant.</li> </ul>","tags":["home-assistant","mqtt"]},{"location":"home-assistant/#configuration","title":"Configuration","text":"<p>To enable MQTT, you must first configure it in the WiFiManager setup page. See Getting Started for more details.</p> <p>Next, add the following configuration to your <code>configuration.yaml</code> file in Home Assistant.</p> <p>configuration.yaml</p> <pre><code>mqtt:\n  - sensor:\n    - name: \"FrameFi Status\"\n      state_topic: \"frame-fi/state\"\n      value_template: \"{{ value_json.mode }}\"\n      icon: \"mdi:image-frame\"\n    - name: \"FrameFi File Count\"\n      state_topic: \"frame-fi/state\"\n      value_template: \"{{ value_json.sd_card.file_count }}\"\n      unit_of_measurement: \"files\"\n      icon: \"mdi:file-multiple\"\n    - name: \"FrameFi Used Space\"\n      state_topic: \"frame-fi/state\"\n      value_template: \"{{ (value_json.sd_card.used_size | float / 1024 / 1024 / 1024) | round(2) }}\"\n      unit_of_measurement: \"GB\"\n      icon: \"mdi:sd\"\n    - name: \"FrameFi Total Space\"\n      state_topic: \"frame-fi/state\"\n      value_template: \"{{ (value_json.sd_card.total_size | float / 1024 / 1024 / 1024) | round(2) }}\"\n      unit_of_measurement: \"GB\"\n      icon: \"mdi:sd\"\n  - switch:\n    - name: \"FrameFi Display\"\n      state_topic: \"frame-fi/display/status\"\n      command_topic: \"frame-fi/display/set\"\n      payload_on: \"ON\"\n      payload_off: \"OFF\"\n      state_on: \"ON\"\n      state_off: \"OFF\"\n      optimistic: false\n      qos: 0\n      retain: true\n      icon: \"mdi:monitor\"\n  - select:\n    - name: \"FrameFi Mode\"\n      state_topic: \"frame-fi/state\"\n      value_template: \"{{ value_json.mode }}\"\n      command_topic: \"frame-fi/mode/set\"\n      options:\n        - \"ftp\"\n        - \"msc\"\n      optimistic: false\n      qos: 0\n      retain: true\n      icon: \"mdi:swap-horizontal\"\n  - button:\n    - name: \"FrameFi Restart\"\n      command_topic: \"frame-fi/restart\"\n      payload_press: \"RESTART\"\n      icon: \"mdi:restart\"\n  - device_tracker:\n    - name: \"FrameFi\"\n      state_topic: \"frame-fi/status\"\n      availability_topic: \"frame-fi/status\"\n      payload_available: \"online\"\n      payload_not_available: \"offline\"\n      payload_home: \"online\"\n      payload_not_home: \"offline\"\n      source_type: \"router\"\n</code></pre>","tags":["home-assistant","mqtt"]},{"location":"home-assistant/#explanation","title":"Explanation","text":"<ul> <li> <p><code>mqtt.sensor</code>:</p> <ul> <li>This creates a new sensor entity in Home Assistant named <code>FrameFi Status</code>.</li> <li>It listens to the <code>frame-fi/state</code> topic and uses a <code>value_template</code> to extract the <code>mode</code> from the JSON payload.</li> <li>The icon is set to <code>mdi:image-frame</code>.</li> </ul> </li> <li> <p><code>mqtt.switch</code>:</p> <ul> <li>This creates a new switch entity named <code>FrameFi Display</code>.</li> <li>It allows you to turn the FrameFi's display on and off from the Home Assistant UI.</li> <li><code>command_topic</code>: When you toggle the switch, it sends either <code>ON</code> or <code>OFF</code> to the <code>frame-fi/display/set</code> topic.</li> <li><code>state_topic</code>: It listens to the <code>frame-fi/display/status</code> topic to get the current state of the display.</li> <li><code>retain: true</code>: This ensures that the last command is retained by the MQTT broker, so the device will pick up the correct state when it reconnects.</li> </ul> </li> <li> <p><code>mqtt.select</code>:</p> <ul> <li>This creates a new select entity named <code>FrameFi Mode</code>.</li> <li>It allows you to switch between <code>ftp</code> and <code>msc</code> modes from the Home Assistant UI.</li> <li><code>command_topic</code>: When you select an option, it sends the selected mode (<code>ftp</code> or <code>msc</code>) to the <code>frame-fi/mode/set</code> topic.</li> <li><code>state_topic</code>: It listens to the <code>frame-fi/state</code> topic and uses a <code>value_template</code> to extract the current <code>mode</code> from the JSON payload.</li> <li><code>retain: true</code>: This ensures that the last command is retained by the MQTT broker.</li> </ul> </li> <li> <p><code>mqtt.button</code>:</p> <ul> <li>This creates a new button entity named <code>FrameFi Restart</code>.</li> <li>When you press the button, it sends <code>RESTART</code> to the <code>frame-fi/restart</code> topic.</li> </ul> </li> <li> <p><code>mqtt.device_tracker</code>:</p> <ul> <li>This creates a new device tracker entity named <code>FrameFi</code>.</li> <li>It listens to the <code>frame-fi/status</code> topic to determine the device's online/offline status.</li> <li><code>payload_available</code>: When the device publishes <code>online</code> to the <code>frame-fi/status</code> topic, it will be marked as <code>home</code>.</li> <li><code>payload_not_available</code>: When the device publishes <code>offline</code> to the <code>frame-fi/status</code> topic, it will be marked as <code>away</code>.</li> <li><code>source_type: \"router\"</code>: This tells Home Assistant to treat the device as a network-based tracker.</li> </ul> </li> <li> <p>Additional Sensors:</p> <ul> <li>The configuration also adds sensors for <code>File Count</code>, <code>Used Space</code>, and <code>Total Space</code>.</li> <li>These sensors also listen to the <code>frame-fi/state</code> topic and use <code>value_template</code> to extract their respective values from the JSON payload.</li> <li>They are configured with appropriate units (<code>files</code>, <code>GB</code>) and icons.</li> </ul> </li> </ul>","tags":["home-assistant","mqtt"]},{"location":"home-assistant/#references","title":"References","text":"<ul> <li>Home Assistant</li> <li>Home Assistant MQTT Integration</li> </ul>","tags":["home-assistant","mqtt"]},{"location":"led-status-indicators/","title":"LED Status Indicators","text":"<p>The onboard LED provides visual feedback on the device's status:</p> Color Meaning Initializing on boot Connecting to Wi-Fi or in setup mode USB Mass Storage (MSC) mode active FTP mode active MQTT connected","tags":["usage","led"]},{"location":"led-status-indicators/#led-brightness","title":"LED Brightness","text":"<p>You can adjust the brightness of the status LED in two ways:</p> <ul> <li> <p>Via Web API (Recommended):</p> <ul> <li>Send a <code>POST</code> request to <code>/led/brightness</code> with a plain text integer between <code>0</code> and <code>255</code> in the request body.</li> <li>This setting is saved to the device's configuration and will persist across reboots.</li> </ul> </li> <li> <p>Via Firmware Build Flags:</p> <ol> <li>Open <code>platformio.ini</code>: Open the <code>platformio.ini</code> file in the root of the project.</li> <li>Find <code>LED_BRIGHTNESS</code>: Locate the <code>build_flags</code> section and find the <code>-D LED_BRIGHTNESS</code> line. If it doesn't exist, you can add it.</li> <li>Change the Value: Set the value to a number between <code>0</code> (off) and <code>255</code> (maximum brightness).</li> <li>Rebuild and Upload: Save the file, then rebuild and upload the firmware for the change to take effect.</li> </ol> </li> </ul> <p>platformio.ini</p> <pre><code>[env]\n...\nbuild_flags =\n  ...\n  -D LED_BRIGHTNESS=15\n</code></pre> <p>Note</p> <p>If the <code>LED_BRIGHTNESS</code> flag is not defined, the brightness will default to <code>13</code> (approximately 5%). The value set via the API will override the build flag value after the first API call.</p>","tags":["usage","led"]},{"location":"led-status-indicators/#references","title":"References","text":"","tags":["usage","led"]},{"location":"modes-of-operation/","title":"Modes of Operation","text":"<p>The device boots into USB Mass Storage (MSC) mode by default. You can switch between modes by pressing the onboard button or by using the web API.</p> <ul> <li> <p>USB Mass Storage Mode (Default):</p> <ol> <li>Plug the T-Dongle-S3 into your computer's USB port.</li> <li>The device will connect to the configured Wi-Fi network. If no credentials are saved, it will go into AP mode.</li> <li>The device will be recognized as a USB Mass Storage device (thumb drive), giving you direct access to the microSD card.</li> </ol> </li> <li> <p>AP Mode:</p> <ol> <li>If the device has no saved Wi-Fi credentials, it will automatically start in AP mode.</li> <li>The device will create a Wi-Fi Access Point named <code>FrameFi-&lt;MAC&gt;</code>.</li> <li>Connect to this AP. If the captive portal does not open automatically, navigate to http://192.168.4.1 in your web browser to configure Wi-Fi.</li> </ol> </li> <li> <p>FTP Server Mode:</p> <ol> <li>Press the onboard button (single click) to switch from MSC to FTP mode or use the web API.</li> <li>Use an FTP client to connect to the device's IP address (visible on the LCD display).</li> </ol> </li> <li> <p>Reset Wi-Fi Settings:</p> <ol> <li>Press and hold the onboard button for at least 3 seconds or use the web API.</li> <li>The device will clear its stored Wi-Fi credentials and restart.</li> <li>Follow the steps for the first-time Wi-Fi setup using the captive portal.</li> </ol> </li> </ul>","tags":["usage"]},{"location":"modes-of-operation/#references","title":"References","text":"","tags":["usage"]},{"location":"software/","title":"Software Dependencies","text":"<p>This project relies on a set of software tools and libraries to ensure proper functionality, development, and documentation. The following sections provide an overview of these dependencies.</p>","tags":["software"]},{"location":"software/#development-tools","title":"Development Tools","text":"<ul> <li>PlatformIO: An open-source ecosystem for IoT development. It provides a   command-line interface (CLI) and a VSCode extension for a seamless   development experience.</li> <li>Task: A task runner and build tool that automates development and build   tasks. See the project's <code>Taskfile.yml</code> for available commands.</li> <li>Docker: Used to create a consistent and reproducible development   environment for the documentation server.</li> <li>Renovate: A tool for automated dependency updates, ensuring that the   project's dependencies are always up-to-date.</li> <li>SOPS: A tool for managing secrets, allowing for the encryption and   decryption of sensitive information.</li> </ul> Task List <pre><code>task: Available tasks for this project:\n* build:                 Build the firmware using PlatformIO.\n* clean:                 Clean the build files.\n* decrypt:               Decrypt secret and environment files using sops.\n* default:               List all available tasks.\n* encrypt:               Encrypt secret and environment files using sops.\n* export:                Export the list of available tasks to task-list.txt.\n* flash:                 Flash the latest firmware to the device using the flash.sh script.\n* ftp:                   Connect to the device using an interactive FTP client.\n* fullclean:             Perform a deep clean of all build and dependency files.\n* get:                   Get device status via API call (unauthenticated).\n* geta:                  Get device status via API call (authenticated).\n* getap:                 Get device status via API call and prettify it (authenticated).\n* getp:                  Get device status via API call and prettyify it (unauthenticated).\n* gflash:                Run Gemini with the gemini-2.5-flash model.\n* gpro:                  Run Gemini with the gemini-2.5-pro model.\n* init:                  Initialize the project by creating secret and environment files from templates.\n* list-devices:          List all connected serial devices.\n* monitor:               Monitor the device's serial output.\n* mqtt-disable:          Disable the MQTT client via API call (unauthenticated).\n* mqtt-disable-a:        Disable the MQTT client via API call (authenticated).\n* mqtt-enable:           Enable the MQTT client via API call (unauthenticated).\n* mqtt-enable-a:         Enable the MQTT client via API call (authenticated).\n* mqtt-toggle:           Toggle the MQTT client via API call (unauthenticated).\n* mqtt-toggle-a:         Toggle the MQTT client via API call (authenticated).\n* ping:                  Ping the device to check network connectivity.\n* prune:                 Prune unused PlatformIO files to save space.\n* reset:                 Reset the dongle by flashing it with the default factory firmware.\n* restart:               Restart the device via API call.\n* serve:                 Serve the documentation locally using Docker.\n* set-brightness:        Set brightness level\n* sftp:                  Switch the device to FTP mode via API call.\n* smsc:                  Switch the device to USB Mass Storage (MSC) mode via API call.\n* sync:                  Synchronize local files to the device via FTP using the sync.sh script.\n* update-packages:       Update all project dependencies to their latest versions.\n* upload:                Upload the compiled firmware to the device.\n* uploadm:               Upload the firmware and immediately start monitoring the serial output.\n* verbose-build:         Build the project with verbose output for debugging.\n</code></pre>","tags":["software"]},{"location":"software/#libraries","title":"Libraries","text":"<ul> <li>bblanchon/ArduinoJson: A C++ JSON library for Arduino and IoT (Internet   of Things).</li> <li>knolleary/PubSubClient: A client library for MQTT.</li> <li>mathertel/OneButton: A library for debouncing and simplifying button   inputs.</li> <li>fastled/FastLED: A library for controlling a wide range of addressable   LEDs.</li> <li>tzapu/WiFiManager: A library for managing Wi-Fi connections on ESP8266   and ESP32 devices.</li> <li>SimpleFTPServer: A library for creating an FTP server on an ESP32.</li> <li>bodmer/TFT_eSPI: A library for driving TFT displays.</li> <li>Preferences: A library for non-volatile storage on ESP32 devices.</li> </ul>","tags":["software"]},{"location":"software/#languages-and-frameworks","title":"Languages and Frameworks","text":"<ul> <li>C++: The primary language used for the firmware development.</li> <li>Python: Used for scripting and automation tasks.</li> <li>Shell Script: Used for various automation and build tasks.</li> <li>MkDocs: A static site generator used for creating the project's   documentation.</li> </ul>","tags":["software"]},{"location":"software/#cicd","title":"CI/CD","text":"<ul> <li>GitHub Actions: Used for automating the build, test, and release   process.</li> </ul>","tags":["software"]},{"location":"software/#references","title":"References","text":"","tags":["software"]},{"location":"synchronizing-files/","title":"Synchronizing Files","text":"<p>This guide provides instructions on how to sync files to your device. You can use the automated <code>sync.sh</code> script for a streamlined experience, or follow the manual instructions for more control.</p>","tags":["usage","synchronizing"]},{"location":"synchronizing-files/#automated-syncing-with-syncsh","title":"Automated Syncing with <code>sync.sh</code>","text":"<p>The <code>scripts/sync.sh</code> script provides an easy way to synchronize a local directory with the device's microSD card over FTP. It uses lftp to mirror the contents, deleting any files on the device that are not present locally.</p>","tags":["usage","synchronizing"]},{"location":"synchronizing-files/#dependencies","title":"Dependencies","text":"<p>You must have <code>lftp</code> installed on your system.</p> Debian/UbuntumacOS (Homebrew) <pre><code>sudo apt install lftp\n</code></pre> <pre><code>brew install lftp\n</code></pre>","tags":["usage","synchronizing"]},{"location":"synchronizing-files/#configuration","title":"Configuration","text":"<p>There are two ways to configure the script:</p> <ul> <li>Copy the template <code>.env</code> File (Recommended):</li> </ul> <pre><code>cp scripts/.env.tmpl scripts/.env\n</code></pre> <ul> <li>Edit <code>scripts/.env</code> with your device's IP address, FTP credentials, and web server credentials (if authentication is enabled).</li> </ul> <p>scripts/.env</p> <pre><code>FTP_HOST=\"192.168.2.169\"\nFTP_USER=\"user\"\nFTP_PASSWORD=\"password\"\nWEB_SERVER_USER=\"\"\nWEB_SERVER_PASSWORD=\"\"\nLOCAL_DIR=\"data\"\nREMOTE_DIR=\"/\"\n</code></pre> <p>Tip</p> <p>You can override the <code>.env</code> file settings by passing environment variables directly.</p>","tags":["usage","synchronizing"]},{"location":"synchronizing-files/#script-usage","title":"Script Usage","text":"<ol> <li>Make sure the device is in FTP Server Mode.</li> <li>Run the script from the scripts directory:</li> </ol> TaskBash <pre><code>task sync\n</code></pre> <pre><code>cd scripts\n./sync.sh\n</code></pre> <p>Example with Command-Line Arguments:</p> <p>This command syncs a specific local directory to the device, overriding any settings in <code>.env</code>. If the web server is authenticated, you must also pass the credentials.</p> <p>./scripts directory</p> <pre><code>FTP_HOST=\"192.168.1.100\" \\\nWEB_SERVER_USER=\"admin\" \\\nWEB_SERVER_PASSWORD=\"password\" \\\nLOCAL_DIR=\"path/to/your/pictures\" \\\n./sync.sh\n</code></pre>","tags":["usage","synchronizing"]},{"location":"synchronizing-files/#manual-syncing","title":"Manual Syncing","text":"<p>If you don't want to use the <code>sync.sh</code> script, you can manually sync a directory using <code>lftp</code>.</p> <pre><code>lftp -c \"\nset ftp:ssl-allow no;\nopen -u '&lt;FTP_USER&gt;','&lt;FTP_PASSWORD&gt;' '&lt;FTP_HOST&gt;';\nmirror -R --delete --verbose --only-missing --no-perms --parallel=1 '&lt;LOCAL_DIR&gt;' '&lt;REMOTE_DIR&gt;';\n\"\n</code></pre>","tags":["usage","synchronizing"]},{"location":"synchronizing-files/#references","title":"References","text":"<ul> <li>lftp</li> </ul>","tags":["usage","synchronizing"]},{"location":"usage/","title":"Usage","text":"<p>This section provides detailed guides on how to use your FrameFi device.</p> <ul> <li> <p> Modes of Operation: Learn about the different modes the device can operate in, including USB Mass Storage, FTP Server, and AP mode.</p> </li> <li> <p> FTP Access: Find out how to connect to the device via FTP to manage your files wirelessly.</p> </li> <li> <p> MQTT Integration: Integrate your device with home automation platforms like Home Assistant.</p> </li> <li> <p> LED Status Indicators: Understand what the different colors of the onboard LED mean.</p> </li> <li> <p> Web API: Control your device programmatically using the web API.</p> </li> <li> <p> Building: Compile the firmware from source.</p> </li> <li> <p> Flashing the Firmware: Learn how to flash pre-compiled firmware to your device.</p> </li> <li> <p> Synchronizing Files: Use scripts to automate the process of uploading your pictures.</p> </li> <li> <p> Display: Customize the onboard LCD display.</p> </li> </ul>","tags":["usage"]}]}